/*
Man Pages
       1   Executable programs or shell commands, command line tools
                man, vim, more, less, apropos
       2   System calls (functions provided by the kernel), written in C code
                open, statx, stat, chmod, time, getpid()
       3   Library calls (functions within program libraries), built from system calls
                printf, scanf, free, 
       4   Special files (usually found in /dev)
       5   File formats and conventions, e.g. /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conven‐
           tions), e.g. man(7), groff(7), man-pages(7)
       8   System  administration  commands  (usually only for
           root)
       9   Kernel routines [Non standard]

man will search in the order of the sections and only display the first
one even if there are more pages in later sections
*/

/*
SECTION 2
int statfs(const char *path, struct statfs *buf);
    Returns inforamtion about a mounted fillesystem. Path is the pathname of any file 
    within the mounted filesystem. buf is a pointer to a statfs structure defined as:
struct statfs {
    __fsword_t f_type;          // Type of filesystem (fstype2name() in showstatfs.c) 
    __fsword_t f_bsize;         // Optimal transfer block size 
    fsblkcnt_t f_blocks;        // Total data blocks in filesystem 
    fsblkcnt_t f_bfree;         // Free blocks in filesystem 
    fsblkcnt_t f_bavail;        // Free blocks available to unprivileged user
    fsfilcnt_t f_files;         // Total inodes in filesystem 
    fsfilcnt_t f_ffree;         // Free inodes in filesystem 
    fsid_t     f_fsid;          // Filesystem ID 
    __fsword_t f_namelen;       // Maximum length of filenames 
    __fsword_t f_frsize;        // Fragment size 
    __fsword_t f_flags;         // Mount flags of filesystem
    __fsword_t f_spare[xxx];    // Padding bytes reserved for future use 
};
    Most of the MAGIC constants of f_type are defined in /usr/include/linux/magic.h
    On success, 0 is returned. On error, -1 is returned and errno is set.
f_flags
    ST_MANDLOCK = Mandatory locking is permitted on the filesystem
    ST_NOATIME = Do not update access times
    ST_NODEV = Disallow  access to device special files on this filesystem.
    ST_NODIRATIME = Do  not  update  directory  access  times
    ST_NOEXEC = Execution  of  programs  is  disallowed  on this filesystem.
    ST_NOSUID = The set-user-ID and set-group-ID  bits  are  ignored  for executable files on this filesystem
    ST_RDONLY = This filesystem is mounted read-only.
    ST_RELATIME = Update  atime  relative  to   mtime/ctime
    ST_SYNCHRONOUS = Writes are synched to the filesystem immediately
    ST_NOSYMFOLLOW = Symbolic links are not followed  when  resolving paths

int stat(const char *pathname, struct stat *statbuf);
    stat() retrieves information about the file pointed to by the pathname
    and sets the statbuf to point to a struct stat. No permissions are required 
    on the file itself, but—in the case of stat() and lstat()—execute (search) permission is
    required on all of the directories in pathname that lead to the file.
    
int lstat(const char *pathname, struct stat *statbuf);
    lstat() is identical to stat(), except that if pathname
    is a symbolic link, then it returns information about
    the link itself, not the file that the link refers to.
struct stat {
    dev_t     st_dev;         // ID of device containing file 
    ino_t     st_ino;         // Inode number 
    mode_t    st_mode;        // File type and mode 
    nlink_t   st_nlink;       // Number of hard links 
    uid_t     st_uid;         // User ID of owner 
    gid_t     st_gid;         // Group ID of owner
    dev_t     st_rdev;        // Device ID (if special file) 
    off_t     st_size;        // Total size, in bytes 
    blksize_t st_blksize;     // Block size for filesystem I/O 
    blkcnt_t  st_blocks;      // Number of 512B blocks allocated 

    struct timespec st_atim;  // Time of last access 
    struct timespec st_mtim;  // Time of last modification 
    struct timespec st_ctim;  // Time of last status change 

#define st_atime st_atim.tv_sec      // Backward compatibility 
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
};

st_dev = describes the device on which this file resides.  
st_ino = the file's inode number.
st_mode = the file type and mode.  
st_nlink = the number of hard links to the file.
st_uid = the user ID of the owner of the file.
st_gid = the ID of the group owner of the file.
st_rdev = the device that this file (inode) represents.
st_size = the size of the file (if it is a regular file or a symbolic  link) in bytes.
          The size of a symbolic link is the length of the pathname it contains, 
          without a terminating null byte.
st_blksize = the "preferred" block size for efficient filesystem I/O.
st_blocks = the number of blocks  allocated to the file
st_atime = time  of  the last access of file data.
st_mtime = time of last  modification of file data.
st_ctime = file's last status change timestamp (time of last change to the inode).




int statx(int dirfd, const char *pathname, int flags, unsigned int mask, struct statx *statxbuf);
    Does the same thing as stat() but has extra features. Execute permission is required on the
    directories in pathname that lear to te file
struct statx {
    __u32 stx_mask;             // Mask of bits indicating filled fields 
    __u32 stx_blksize;          // Block size for filesystem I/O 
    __u64 stx_attributes;       // Extra file attribute indicators 
    __u32 stx_nlink;            // Number of hard links 
    __u32 stx_uid;              // User ID of owner 
    __u32 stx_gid;              // Group ID of owner 
    __u16 stx_mode;             // File type and mode 
    __u64 stx_ino;              // Inode number 
    __u64 stx_size;             // Total size in bytes 
    __u64 stx_blocks;           // Number of 512B blocks allocated 
    __u64 stx_attributes_mask;  // Mask to show what's supported in stx_attributes 

    struct statx_timestamp stx_atime;  // Last access 
    struct statx_timestamp stx_btime;  // Creation 
    struct statx_timestamp stx_ctime;  // Last status change 
    struct statx_timestamp stx_mtime;  // Last modification 

    // If this file represents a device, then the next two fields contain the ID of the device 
    __u32 stx_rdev_major;  // Major ID 
    __u32 stx_rdev_minor;  // Minor ID

    // Contains the ID of the device containing the filesystem where the file resides 
    __u32 stx_dev_major;   // Major ID 
    __u32 stx_dev_minor;   // Minor ID 
};

// Time stamps
struct statx_timestamp {
    __s64 tv_sec;    // Seconds since the Epoch (UNIX time) 
    __u32 tv_nsec;   // Nanoseconds since tv_sec 
};

For dirfd and pathname,
    Pathname begins with a slash (absolute pathname), dirfd is ignored
    Pathname does not begin with a slash (relative pathname), put dirfd
    as AT_FDCWD so pathname is intreptred as pathname relative to current
    working direcotry.
        Does not begin with slash and dirfd is an actual file descriptor
        that refers to a directory, then pathname is relative to that directory
    Pathname is "" and flag is AT_EMPTY_PATH, the target file is the one by dirfd

FLAGS are used influence a pathname-based lookup.
    AT_EMPTY_PATH = operte on teh dirfd as the target file
    AT_SYMLINK_NOFOLLOW = If pathname is symbolic link, do no derefernce it.
                          Instead return information about the link itself

MASKS tell the kernel which fileds the caller is interested in.
    STATX_TYPE          Want stx_mode & S_IFMT
    STATX_MODE          Want stx_mode & ~S_IFMT
    STATX_NLINK         Want stx_nlink
    STATX_UID           Want stx_uid
    STATX_GID           Want stx_gid
    STATX_ATIME         Want stx_atime
    STATX_MTIME         Want stx_mtime
    STATX_CTIME         Want stx_ctime
    STATX_INO           Want stx_ino
    STATX_SIZE          Want stx_size
    STATX_BLOCKS        Want stx_blocks
    STATX_BASIC_STATS   [All of the above]
    STATX_BTIME         Want stx_btime
    STATX_ALL           [All currently available fields]


SECTION 3
int statvfs(const char *path, struct statvfs *buf);
    Returns information about a mounted filesystem, path is the pathname of any file within
    the mounted filesystem. buf is a pointer to a statvfs strucutre defined as below:
struct statvfs {
    unsigned long  f_bsize;    // Filesystem block size 
    unsigned long  f_frsize;   // Fragment size 
    fsblkcnt_t     f_blocks;   // Size of fs in f_frsize units 
    fsblkcnt_t     f_bfree;    // Number of free blocks 
    fsblkcnt_t     f_bavail;   // Number of free blocks for unprivileged users 
    fsfilcnt_t     f_files;    // Number of inodes 
    fsfilcnt_t     f_ffree;    // Number of free inodes 
    fsfilcnt_t     f_favail;   // Number of free inodes for unprivileged users 
    unsigned long  f_fsid;     // Filesystem ID 
    unsigned long  f_flag;     // Mount flags 
    unsigned long  f_namemax;  // Maximum filename length 
};
    NOTE: fsblkcnt_t and fsfilcnt_t are defined in <sys/types.h> as unsigned long.
    On success, 0 is returned. On error, -1 is returned and errno is set.

unsigned int major(dev_t dev);
unsigned int minor(dev_t dev);
dev_t makedev(unsigned int maj, unsigned int min);
    A device ID consists of two parts: a major ID, identifying the class of 
    the device, and a minor ID,  identifying a specific instance of a device 
    in that class. A device ID is represented using the type dev_t. Given major 
    and minor device IDs, makedev() combines these to produce a device ID, 
    returned as the function result. 

    The  major() and minor() functions perform the converse task: given a device
    ID, they return, respectively, the major and minor components. These macros 
    can be useful to, for example, decompose the device IDs in the structure returned
    by stat(2).

struct group *getgrgid(gid_t gid);
    Returns a pointer to a structure containing the broken-out fields of the record in 
    the group database that matches the group ID gid or NULL if no match
/etc/group
struct group {
    char   *gr_name;        // group name 
    char   *gr_passwd;      // group password 
    gid_t   gr_gid;         // group ID 
    char  **gr_mem;         // NULL-terminated array of pointers to names of group members 
};
*/

// fsidtest.c
// Prints out the filesystem id for a file
#define _GNU_SOURCE
#include <stdio.h>              // printf (3)
#include <sys/stat.h>           // statvfs (3) for fsblkcnt_t and fsfilcnt_t
#include <sys/statvfs.h>        // statvfs (3)

int main(int argc, char **argv)
{
    struct statvfs statvfs_buffer;

    if (argc < 2)
        printf("usage: this-program pathname\n");
    else
        if ( statvfs(argv[1],  &statvfs_buffer) == 0 )
            printf("Filesystem ID: %lx\n", statvfs_buffer.f_fsid);
    return 0;
}
// ./fsidtest ll
// Output: Filesystem ID: 9c913459e4c89e38

/******************************************************************************/

// showstatfs.c
// Displays filesystem status, similar to "stat -f"
#define _GNU_SOURCE
#include <stdio.h>              // printf (3)
#include <stdlib.h>               // exit (3)
#include <string.h>             // basename (3)
#include <errno.h>
#include <sys/stat.h>           // statvfs (3) for fsblkcnt_t and fsfilcnt_t
#include <sys/statvfs.h>        // statvfs (3)
#include <sys/vfs.h>            // statfs (2)

void usage_error(const char *msg) {
    fprintf(stderr, "Usage Error: %s\n", msg);
    exit(EXIT_FAILURE);
}

void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

/** fstype2name() returns the human-readable string represented by the
     statfs_buffer's f_type member.
            */
char* fstype2name( struct statfs statfs_buffer )
{
    switch (statfs_buffer.f_type) {
        case  0x5A3C69F0 : return "aafs";
        case  0x61636673 : return "acfs";
        case  0xADF5     : return "adfs";
        case  0xADFF     : return "affs";
        case  0x5346414F : return "afs";
        case  0x09041934 : return "anon-inode FS";
        case  0x61756673 : return "aufs";
        case  0x0187     : return "autofs";
        case  0x13661366 : return "balloon-kvm-fs";
        case  0x42465331 : return "befs";
        case  0x62646576 : return "bdevfs";
        case  0x1BADFACE : return "bfs";
        case  0x6C6F6F70 : return "binderfs";
        case  0xCAFE4A11 : return "bpf_fs";
        case  0x42494E4D : return "binfmt_misc";
        case  0x9123683E : return "btrfs";
        case  0x73727279 : return "btrfs_test";
        case  0x00C36400 : return "ceph";
        case  0x0027E0EB : return "cgroupfs";
        case  0x63677270 : return "cgroup2fs";
        case  0xFF534D42 : return "cifs";
        case  0x73757245 : return "coda";
        case  0x012FF7B7 : return "coh";
        case  0x62656570 : return "configfs";
        case  0x28CD3D45 : return "cramfs";
        case  0x453DCD28 : return "cramfs-wend";
        case  0x64646178 : return "daxfs";
        case  0x64626720 : return "debugfs";
        case  0x1373     : return "devfs";
        case  0x1CD1     : return "devpts";
        case  0x444D4142 : return "dma-buf-fs";
        case  0xF15F     : return "ecryptfs";
        case  0xDE5E81E4 : return "efivarfs";
        case  0x00414A53 : return "efs";
        case  0xE0F5E1E2 : return "erofs";
        case  0x45584653 : return "exfs";
        case  0x5DF5     : return "exofs";
        case  0x137D     : return "ext";
        case  0xEF53     : return "ext2/ext3";
        case  0xEF51     : return "ext2";
        case  0xF2F52010 : return "f2fs";
        case  0x4006     : return "fat";
        case  0x19830326 : return "fhgfs";
        case  0x65735546 : return "fuseblk";
        case  0x65735543 : return "fusectl";
        case  0x0BAD1DEA : return "futexfs";
        case  0x01161970 : return "gfs/gfs2";
        case  0x47504653 : return "gpfs";
        case  0x4244     : return "hfs";
        case  0x482B     : return "hfs+";
        case  0x4858     : return "hfsx";
        case  0x00C0FFEE : return "hostfs";
        case  0xF995E849 : return "hpfs";
        case  0x958458F6 : return "hugetlbfs";
        case  0x11307854 : return "inodefs";
        case  0x013111A8 : return "ibrix";
        case  0x2BAD1DEA : return "inotifyfs";
        case  0x9660     : return "isofs";
        case  0x4004     : return "isofs";
        case  0x4000     : return "isofs";
        case  0x07C0     : return "jffs";
        case  0x72B6     : return "jffs2";
        case  0x3153464A : return "jfs";
        case  0x6B414653 : return "k-afs";
        case  0xC97E8168 : return "logfs";
        case  0x0BD00BD0 : return "lustre";
        case  0x5346314D : return "m1fs";
        case  0x137F     : return "minix";
        case  0x138F     : return "minix (30 char.)";
        case  0x2468     : return "minix v2";
        case  0x2478     : return "minix v2 (30 char.)";
        case  0x4D5A     : return "minix3";
        case  0x19800202 : return "mqueue";
        case  0x4D44     : return "msdos";
        case  0x564C     : return "novell";
        case  0x6969     : return "nfs";
        case  0x6E667364 : return "nfsd";
        case  0x3434     : return "nilfs";
        case  0x6E736673 : return "nsfs";
        case  0x5346544E : return "ntfs";
        case  0x9FA1     : return "openprom";
        case  0x7461636F : return "ocfs2";
        case  0x794C7630 : return "overlayfs";
        case  0xAAD7AAEA : return "panfs";
        case  0x50495045 : return "pipefs";
        case  0xC7571590 : return "ppc-cmm-fs";
        case  0x7C7C6673 : return "prl_fs";
        case  0x9FA0     : return "proc";
        case  0x6165676C : return "pstorefs";
        case  0x002F     : return "qnx4";
        case  0x68191122 : return "qnx6";
        case  0x858458F6 : return "ramfs";
        case  0x07655821 : return "rdt";
        case  0x52654973 : return "reiserfs";
        case  0x7275     : return "romfs";
        case  0x67596969 : return "rpc_pipefs";
        case  0x5DCA2DF5 : return "sdcardfs";
        case  0x73636673 : return "securityfs";
        case  0xF97CFF8C : return "selinux";
        case  0x43415D53 : return "smackfs";
        case  0x517B     : return "smb";
        case  0xFE534D42 : return "smb2";
        case  0xBEEFDEAD : return "snfs";
        case  0x534F434B : return "sockfs";
        case  0x73717368 : return "squashfs";
        case  0x62656572 : return "sysfs";
        case  0x012FF7B6 : return "sysv2";
        case  0x012FF7B5 : return "sysv4";
        case  0x01021994 : return "tmpfs";
        case  0x74726163 : return "tracefs";
        case  0x24051905 : return "ubifs";
        case  0x15013346 : return "udf";
        case  0x00011954 : return "ufs";
        case  0x54190100 : return "ufs";
        case  0x9FA2     : return "usbdevfs";
        case  0x01021997 : return "v9fs";
        case  0xBACBACBC : return "vmhgfs";
        case  0xA501FCF5 : return "vxfs";
        case  0x565A4653 : return "vzfs";
        case  0x53464846 : return "wslfs";
        case  0xABBA1974 : return "xenfs";
        case  0x012FF7B4 : return "xenix";
        case  0x58465342 : return "xfs";
        case  0x012FD16D : return "xia";
        case  0x0033     : return "z3fold";
        case  0x2FC12FC1 : return "zfs";
        case  0x58295829 : return "zsmallocfs";
        default: return "unknown";
    }
}

// print_moptions() prints descriptions of the enabled mount options bitwise-or-ed into flag.
void print_moptions( unsigned long flag )
{
    printf("Mount flags:\n");
    if (flag & ST_RDONLY )
        printf(" Mount read-only.  \n");
    if (flag & ST_NOSUID )
        printf(" Ignore suid and sgid bits.  \n");
    if (flag & ST_NODEV  )
        printf(" Disallow access to  device special files.  \n");
    if (flag & ST_NOEXEC  )
        printf(" Disallow program execution.  \n");
    if (flag & ST_SYNCHRONOUS )
        printf(" Writes are synced at once.  \n");
    if (flag & ST_MANDLOCK  )
        printf(" Allow mandatory locks on an FS.  \n");
    if (flag & ST_WRITE )
        printf(" Write on file/directory/symlink.  \n");
    if (flag & ST_APPEND  )
        printf(" Append-only file.  \n");
    if (flag & ST_IMMUTABLE  )
        printf(" Immutable file.  \n");
    if (flag & ST_NOATIME  )
        printf(" Do not update access times.  \n");
    if (flag & ST_NODIRATIME  )
         printf(" Do not update directory access times.  \n");
    if (flag & ST_RELATIME   )
         printf(" Update atime relative to mtime/ctime.  \n");
}

/** print_stat(sb, ftype) prints the available members of the statvfs
    structure, sb, as well as the filesystem type, fstype.                 */
void print_stat(struct statvfs statvfs_buf, char* fstype)
{
    unsigned int low = statvfs_buf.f_fsid & 0xFFFFFFFF;
    unsigned int high = ( statvfs_buf.f_fsid  >> 32)& 0xFFFFFFFF;
    printf("    ID: %08x%08x", low, high);
    printf(" Namelen: %-8lu", statvfs_buf.f_namemax);
    printf("Type: %s\n", fstype);
    printf("Block size: %-11lu", (unsigned long) statvfs_buf.f_bsize);
    printf("Fundamental block size: %lu\n", statvfs_buf.f_frsize);
    printf("Blocks: Total: %-10lu", statvfs_buf.f_blocks);
    printf("Free: %-11lu", statvfs_buf.f_bfree);
    printf(" Available: %lu\n",statvfs_buf.f_bavail);
    printf("Inodes: Total: %-10lu", statvfs_buf.f_files);
    printf("Free: %lu\n", statvfs_buf.f_ffree);
}

int main(int argc, char **argv)
{
    struct statvfs statvfs_buffer; /* statvfs structure filled by statvfs()*/
    struct statfs  statfs_buffer;  /* statfs structure filled by statfs()  */
    char           mssge[128];     /* string to store error messages       */

    /* If no file arguments, print a usage message. */
    if (argc < 2) {
        sprintf(mssge,"usage: %s file \n", basename(argv[0]));
        usage_error(mssge);
    }
    printf("  File: \"%s\"\n", argv[1]);
    errno = 0;
    if ( statvfs(argv[1],  &statvfs_buffer) < 0 ) {
         sprintf(mssge, "Could not statvfs file %s\n", argv[1]);
         fatal_error(errno, mssge);
    }
    errno = 0;
    if ( statfs(argv[1],  &statfs_buffer) < 0 ) {
         sprintf(mssge,"Could not statfs file %s\n", argv[1]);
         fatal_error(errno, mssge);
    }
    print_stat(statvfs_buffer, fstype2name(statfs_buffer));
    return 0;
}
// ./showstatfs fsidtest.c
// Output:
/*
  File: "fsidtest.c"
    ID: 0000000000000000 Namelen: 255     Type: nfs
Block size: 65536      Fundamental block size: 65536
Blocks: Total: 79691776  Free: 38711046    Available: 38711046
Inodes: Total: 31876689  Free: 23179420
*/

/******************************************************************************/

// lstat_manpage_example.c
#include <sys/types.h>      // lstat (2)
#include <sys/stat.h>       // lstat (3)
#include <stdint.h>
#include <time.h>           // ctime (3)
#include <stdio.h>          // fprintf (3), perror (3)
#include <stdlib.h>         // exit (3)
#include <sys/sysmacros.h>  // major (3), minor (3)

int main(int argc, char *argv[])
{
    struct stat sb;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <relative_pathname>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (lstat(argv[1], &sb) == -1) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }


    printf("ID of containing device:  [%jx,%jx]\n",
            (uintmax_t) major(sb.st_dev),
            (uintmax_t) minor(sb.st_dev));

    printf("File type:                ");

    switch (sb.st_mode & S_IFMT) {
    case S_IFBLK:  printf("block device\n");            break;
    case S_IFCHR:  printf("character device\n");        break;
    case S_IFDIR:  printf("directory\n");               break;
    case S_IFIFO:  printf("FIFO/pipe\n");               break;
    case S_IFLNK:  printf("symlink\n");                 break;
    case S_IFREG:  printf("regular file\n");            break;
    case S_IFSOCK: printf("socket\n");                  break;
    default:       printf("unknown?\n");                break;
    }

    printf("I-node number:            %ju\n",  sb.st_ino);

    printf("Mode:                     %o (octal)\n",
             sb.st_mode);

    printf("Link count:               %ju\n", (uintmax_t) sb.st_nlink);
    printf("Ownership:                UID=%ju   GID=%ju\n",
            (uintmax_t) sb.st_uid, (uintmax_t) sb.st_gid);

    printf("Preferred I/O block size: %jd bytes\n",
            (intmax_t) sb.st_blksize);
    printf("File size:                %jd bytes\n",
            (intmax_t) sb.st_size);
    printf("Blocks allocated:         %ld\n",
             sb.st_blocks);

    printf("Last status change:       %s", ctime(&sb.st_ctim.tv_sec));
    printf("Last file access:         %s", ctime(&sb.st_atim.tv_sec));
    printf("Last file modification:   %s", ctime(&sb.st_mtim.tv_sec));

    exit(EXIT_SUCCESS);
}
// ./lstat_manpage_example ll
// Output:
/*
ID of containing device:  [0,3e]
File type:                symlink
I-node number:            6171375
Mode:                     120777 (octal)
Link count:               1
Ownership:                UID=16134   GID=300
Preferred I/O block size: 65536 bytes
File size:                16 bytes
Blocks allocated:         0
Last status change:       Sun Dec 10 09:06:04 2023
Last file access:         Sun Dec 10 10:45:41 2023
Last file modification:   Sun Dec 10 09:06:04 2023
*/

/******************************************************************************/

// showstat.c
// Simulates the stat command, with only the -L option
#define _GNU_SOURCE         // Needed to expose statx() function in glibc */
#include <sys/types.h>      // lstat (2)
#include <sys/stat.h>       // lstat (2), statx (2) required according to man page, S_ISDIR() ...
#include <stdint.h>
#include <fcntl.h>          // For AT_SYMLINK_NOFOLLOW, AT_FDCWD
#include <time.h>           // ctime (3)
#include <stdio.h>          // fprintf (3), perror (3)
#include <stdlib.h>         // exit (3)
#include <string.h>         // basename (3)
#include <unistd.h>         // getopt (3) 
#include <locale.h>         // setlocale (3)
#include <errno.h>  
#include <sys/sysmacros.h>  // major (3), minor (3)
#include <pwd.h>
#include <grp.h>

#define TRUE                1
#define LOCALE_ERROR        1
#define BAD_FORMAT_ERROR    3
#define NUM_FIELDS          13    /* Number of fields in statx structure */

void usage_error(const char *msg) {
    fprintf(stderr, "Usage Error: %s\n", msg);
    exit(EXIT_FAILURE);
}

void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

void error_mssge(int code, const char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}


char* mode2str( int mode)
{
    static char str[] = "----------";           /* Initial string   */

    if      ( S_ISDIR(mode) )  str[0] = 'd';    /* Directory         */
    else if ( S_ISCHR(mode) )  str[0] = 'c';    /* Char devices      */
    else if ( S_ISBLK(mode) )  str[0] = 'b';    /* Block device      */
    else if ( S_ISLNK(mode) )  str[0] = 'l';    /* Symbolic link     */
    else if ( S_ISFIFO(mode))  str[0] = 'p';    /* Named pipe (FIFO) */
    else if ( S_ISSOCK(mode))  str[0] = 's';    /* Socket            */

    if ( mode & S_IRUSR ) str[1] = 'r';
    if ( mode & S_IWUSR ) str[2] = 'w';
    if ( mode & S_IXUSR ) str[3] = 'x';

    if ( mode & S_IRGRP ) str[4] = 'r';
    if ( mode & S_IWGRP ) str[5] = 'w';
    if ( mode & S_IXGRP ) str[6] = 'x';

    if ( mode & S_IROTH ) str[7] = 'r';
    if ( mode & S_IWOTH ) str[8] = 'w';
    if ( mode & S_IXOTH ) str[9] = 'x';

    /* Now check the setuid, setgid, and sticky bits */
    if ( mode & S_ISUID ) str[3] = 's';
    if ( mode & S_ISGID ) str[6] = 's';
    if ( mode & S_ISVTX ) str[9] = 't';
    return str;
}

/****************************************************************************/
char* uid2name ( uid_t uid )
{
    struct  passwd *pw_ptr;

    if ( ( pw_ptr = getpwuid( uid ) ) == NULL )
          return "";
    else
      return pw_ptr->pw_name ;
}

/*--------------------------------------------------------------------------*/
char* gid2name ( gid_t gid  )
{
    struct group *grp_ptr;
    static  char numstr[10];

    if ( ( grp_ptr = getgrgid(gid) ) == NULL ) {
          sprintf(numstr,"%d", gid);
          return numstr;
    }
    else
          return grp_ptr->gr_name;
}


void ids2hexdecstr(unsigned int major, unsigned int minor, char* buffer)
{
    sprintf(buffer, "%02x%02xh/%lud", major, minor,  makedev(major, minor));
}


void print_time(const char* label, struct statx_timestamp *time_field)
{
    struct tm *bdtime;                 /* Broken-down time                 */
    char       formatted_time[100];    /* String storing formatted time    */
    char       timezone[32];           /* To store time offset             */
    time_t     time_val;               /* For converted tv_sec field       */

    time_val = time_field->tv_sec;          /* Convert to time_t           */
    bdtime = localtime(&time_val);          /* Convert to broken-down time */
    if (bdtime == NULL)                     /* Check for error             */
        fatal_error(EOVERFLOW, "localtime");

    /* Create a string from the broken down time. */
    if ( strftime(formatted_time, sizeof(formatted_time), "%F %T", bdtime) == 0 )
        fatal_error(BAD_FORMAT_ERROR,"strftime failed\n");

    printf("%s%s.%09u", label, formatted_time, time_field->tv_nsec );
    if ( 0 == strftime(timezone, 32, " %z", bdtime) )
        fatal_error(BAD_FORMAT_ERROR, "Error printing time zone\n");
    printf("%s\n", timezone);
}


/* A function to print the statx structure using the same format as the stat
   command */
void print_statx(struct statx *stx, int what2print[])
{
    char idstring[64];

    if (stx->stx_mask & STATX_SIZE)
        printf("  Size: %-16llu", (unsigned long long)stx->stx_size);

    if (stx->stx_mask & STATX_BLOCKS)
        printf("Blocks: %-10llu", (unsigned long long)stx->stx_blocks);

    printf(" IO Block: %-7lu", (unsigned long )stx->stx_blksize);

    if (stx->stx_mask & STATX_TYPE)
        switch (stx->stx_mode & S_IFMT) {
        case S_IFIFO:printf("  FIFO\n"); break;
        case S_IFCHR:printf("  character special file\n");break;
        case S_IFDIR:printf("  directory\n"); break;
        case S_IFBLK:printf("  block special file\n");break;
        case S_IFREG:printf("  regular file\n");break;
        case S_IFLNK:printf("  symbolic link\n"); break;
        case S_IFSOCK:printf("  socket\n");     break;
        default:
            printf(" unknown type (%o)\n", stx->stx_mode & S_IFMT);
            break;
        }
    else
        printf(" no type\n");

    ids2hexdecstr(stx->stx_dev_major, stx->stx_dev_minor, idstring);
    printf("Device: %-16s", idstring);

    if (stx->stx_mask & STATX_INO)
        printf("Inode: %-11llu", (unsigned long long) stx->stx_ino);

    if (stx->stx_mask & STATX_NLINK)
        printf(" Links: %-5lu", (unsigned long) stx->stx_nlink);

    if (stx->stx_mask & STATX_TYPE) {
        switch (stx->stx_mode & S_IFMT) {
        case S_IFBLK:
        case S_IFCHR:
            printf(" Device type: %lu,%lu",
                  (unsigned long) stx->stx_rdev_major, (unsigned long) stx->stx_rdev_minor);
            break;
        }
    }
    printf("\n");

    if (stx->stx_mask & STATX_MODE)
        printf("Access: (%04o/%s)", stx->stx_mode & 07777, mode2str((int) stx->stx_mode));

    if (stx->stx_mask & STATX_UID)
        printf("  Uid: (%5ld/ %s)  ", (long) stx->stx_uid, uid2name(stx->stx_uid));

    if (stx->stx_mask & STATX_GID)
        printf("  Gid: (%5ld/ %s)\n", (long) stx->stx_gid, gid2name(stx->stx_gid));

    if (stx->stx_mask & STATX_ATIME)
        print_time("Access: ", &stx->stx_atime);

    if (stx->stx_mask & STATX_MTIME)
        print_time("Modify: ", &stx->stx_mtime);

    if (stx->stx_mask & STATX_CTIME)
        print_time("Change: ", &stx->stx_ctime);

    if (stx->stx_mask & STATX_BTIME)
        print_time(" Birth: ", &stx->stx_btime);
}


int main(int argc, char **argv)
{
    struct statx statx_buffer;    // statx structure filled by statx()       
    char         usage_mssge[128];// string to store usage message           
    unsigned int mask;            // mask to pass to statx()                 
    char         options[] = "L"; // String for getopt() processing          
    int          report_on_link;  // Flag indicating whether to report on link
    ssize_t      nbytes;          // Return value of readlink()               
    char         target[256];
    int          to_print[NUM_FIELDS];
    int          i;
    char         ch;

    /* Set the mask to request the basic fields and the birth time.
       These are what the stat command displays by default. */
    mask = STATX_BASIC_STATS | STATX_BTIME;

    /* Initialize the array of fields to print. */
    for ( i = 0; i < NUM_FIELDS; i++ ) to_print[i] = 1;

    /* Default behavior is to report on symbolic links, not their targets.    */
    report_on_link = AT_SYMLINK_NOFOLLOW; /* See the man page. */

    /* Make the program locale-sensitive so that times are printed using
       the user's locale settings.*/
    if ( setlocale(LC_TIME, "") == NULL )
        fatal_error(LOCALE_ERROR,"setlocale() could not set the given locale");

    /* Parse the command line for options. */
    while  (TRUE) {
        /* Call getopt, passing argc and argv and the options string */
        ch = getopt(argc, argv, options);
        if ( -1 == ch ) /* No more options  */
            break;
        switch ( ch ) {
        case 'L':      /* follow symbolic links and report on their targets. */
            report_on_link = 0;
            break;
        case '?' :
            fprintf(stderr,"Found invalid option %c\n", optopt);
            sprintf(usage_mssge, "%s [-L ] files ...\n", basename(argv[0]));
            usage_error(usage_mssge);
            break;
        }
    }
    /* If no file arguments, print a usage message. */
    if (optind >= argc) {
        sprintf(usage_mssge,"usage: %s [-L] files ...\n", basename(argv[0]));
        usage_error(usage_mssge);
    }
    /* For each file argument, call statx() and print its metadata. */
    for ( i = optind; i < argc; i++) {
        if ( statx(AT_FDCWD, argv[i], report_on_link, mask, &statx_buffer) < 0 )
             printf("Could not stat file %s\n", argv[i]);
        else {
            if ( S_ISLNK(statx_buffer.stx_mode)) {  /* File's a soft link */
                if ( report_on_link == AT_SYMLINK_NOFOLLOW) {
                    /* Report is of the link itself, not its target, so
                       write the file name in the form 'link -> target' */
                    errno = 0;
                    if ( -1 == (nbytes = readlink(argv[i], target, sizeof(target))))
                        error_mssge(errno, "readlink");
                    else {
                        target[nbytes] = '\0';
                        printf("  File: %s -> %s\n", argv[i], target);
                    }
                }
                else /* Report is of the target */
                    printf("  File: %s\n", argv[i]);
            }
            else
                printf("  File: %s\n", argv[i]);

            print_statx(&statx_buffer, to_print);
        }
        /* If there's another file, print a dashed separator line */
        if ( i < argc-1 )
            printf("----------------------------------"
                       "-----------------------------------------\n");
    }
    return 0;
}
// ./showstat ll
// Output:
/*
  File: ll -> /var/log/lastlog
  Size: 16              Blocks: 0          IO Block: 65536    symbolic link
Device: 003eh/62d       Inode: 6171375     Links: 1
Access: (0777/lrwxrwxrwx)  Uid: (16134/ brandon.cohen42)    Gid: (  300/ 300)
Access: 2023-12-10 10:45:41.878894000 -0500
Modify: 2023-12-10 09:06:04.580131000 -0500
Change: 2023-12-10 09:06:04.580131000 -0500
*/