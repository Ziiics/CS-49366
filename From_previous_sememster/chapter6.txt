/*
Man Pages
       1   Executable programs or shell commands, command line tools
                man, vim, more, less, apropos
       2   System calls (functions provided by the kernel), written in C code
                open, statx, stat, chmod, time, getpid()
       3   Library calls (functions within program libraries), built from system calls
                printf, scanf, free, 
       4   Special files (usually found in /dev)
       5   File formats and conventions, e.g. /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conven‚Äê
           tions), e.g. man(7), groff(7), man-pages(7)
       8   System  administration  commands  (usually only for
           root)
       9   Kernel routines [Non standard]

man will search in the order of the sections and only display the first
one even if there are more pages in later sections
*/

/*
SECTION 2
off_t lseek(int fd, off_t offset, int whence);
    lseek()  repositions  the  file offset of the open file fd  to the  argument  
    offset according to the directive whence as follows:
    SEEK_SET = the file offset is set to offset bytes.
    SEEK_CUR = The file offset is set to its current location plus offset bytes.
    SEEK_END = The file offset is set to the size of the file plus offset bytes.
    Returns the resulting offset location as measured in bytes from the beginning 
    of the file. On error, the value (off_t) -1 is returned and errno is set

uid_t getuid(void);
    Returns the real user ID of the caling process
    Errors: These functions are always successful


SECTION 3
struct passwd *getpwuid(uid_t uid);
    Returns a pointer to a structure containing the broken-out fields 
    of the record in the password database that matches the user ID uid
    OR Returns NULL if there is not match and errno is set appropriately

/etc/passwd
struct passwd {
    char   *pw_name;       // username 
    char   *pw_passwd;     // user password 
    uid_t   pw_uid;        // user ID 
    gid_t   pw_gid;        // group ID
    char   *pw_gecos;      // user information 
    char   *pw_dir;        // home directory 
    char   *pw_shell;      // shell program 
};

void setpwent(void);
    Rewinds to the beginning of the password database

void getpwent(void);
    Returns a pointer to a passwd strucutre containing the broken-out fields 
    of a record from the passowrd database at /etc/passwd or NULL if there are 
    no more entries or an error occurred. If error occurs, errno is set. Errno
    should be set to 0 before the function

void endpwent(void);
    Used to close the password database after all processing has been performed

int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, size_t n);
    Compares two strings s1 and s2, locale is not taken into acconunt (see strcoll)
    Comparison is done using unsigned characters. Returns 0 if both equal, negative value
    if s1 is less than s2 or positive value if s1 is great than s2
    strncmp is simliar but it only compares the first n bytes of each

void *memcpy(void *dest, const void *src, size_t n);
    Copies n bytes from memory area src to memory area dest.
    Returns a pointer to dest


SECTION 5
#include <utmp.h>
The  utmp file records who is currently logged into the system. 

The wtmp file records all logins and logouts.  Its format is exactly like utmp except 
that a null username indicates a logout on the associated terminal.  Furthermore, the 
terminal name ~ with username shutdown or reboot indicates a system
shutdown or reboot and the pair of terminal names |/} logs the old/new 
system time when date(1) changes it.
FILES
    /var/run/utmp
    /var/log/wtmp
lastb is the same as last, except that by default it shows a log of the /var/log/btmp 
file, which contains all the bad login attempts.

Values for ut_type field
#define EMPTY         0 // Record does not contain valid info
#define RUN_LVL       1 // Change in system run-level 
#define BOOT_TIME     2 // Time of system boot (in ut_tv)
#define NEW_TIME      3 // Time after system clock change (in ut_tv)
#define OLD_TIME      4 // Time before system clock change (in ut_tv)
#define INIT_PROCESS  5 // Process spawned by init(1) 
#define LOGIN_PROCESS 6 // Session leader process for user login 
#define USER_PROCESS  7 // Normal process 
#define DEAD_PROCESS  8 // Terminated process 
#define ACCOUNTING    9 // Not implemented 

#define UT_LINESIZE      32
#define UT_NAMESIZE      32
#define UT_HOSTSIZE     256

struct exit_status {              // Type for ut_exit, below 
    short e_termination;          // Process termination status 
    short e_exit;                 // Process exit status 
};

// ut_type, ut_user, ut_id, ut_line, ut_exit.e_exit, ut_exit.e_termination, ut_host, ut_tv.tv_sec
struct utmp {
    short   ut_type;              // Type of record 
    pid_t   ut_pid;               // PID of login process 
    char    ut_line[UT_LINESIZE]; // Device name of tty
    char    ut_id[4];             // Terminal name suffix, or inittab(5) ID
    char    ut_user[UT_NAMESIZE]; // Username 
    char    ut_host[UT_HOSTSIZE]; // Hostname for remote login, or kernel version for run-level messages 
    struct  exit_status ut_exit;  // Exit status of a process marked as DEAD_PROCESS

#if __WORDSIZE == 64 && defined __WORDSIZE_COMPAT32
    int32_t ut_session;           // Session ID (getsid(2))

    struct {
        int32_t tv_sec;           // Seconds 
        int32_t tv_usec;          // Microseconds 
    } ut_tv;                      // Time entry was made 
#else
    long   ut_session;           // Session ID 
    struct timeval ut_tv;        // Time entry was made 
#endif

    int32_t ut_addr_v6[4];        /* Internet address of remote host; IPv4 address uses

    char __unused[20];            // Reserved for future use 
};

SECTION 8
lastlog [options]
    reports the most recent login of all users or of a given user and puts it in the
    /var/log/lastlog file. The default with no flags causes lastlog entries to be printed 
    sorted by their order in /etc/passwd
*/

/******************************************************************************/

#include <stdlib.h>         // printf (3)
#include <stdlib.h>         // exit (3)
#include <fcntl.h>          // open (2)
#include <sys/stat.h>       // open (2)
#include <sys/types.h>      // lseek (2)
#include <unistd.h>

int main(int argc, char* argv[])
{
    if ( argc < 2 )
       exit(1);

    int fd = open(argv[1], O_RDONLY);
    if ( -1 == fd )
       exit(1);

    printf("%ld\n", lseek(fd,0,SEEK_END));
    return 0;
}
// ./filesize file
// Output: 16088

/******************************************************************************/

// mk_filehole.c
#define _GNU_SOURCE
#include <stdio.h>          // fprintf (3), sprintf (3)
#include <stdlib.h>         // exit (3)
#include <string.h>         // basename (3)
#include <errno.h>          // errno
#include <fcntl.h>          // open (2)
#include <unistd.h>         // read (2), write (2), close (2)
#include <sys/types.h>      // lseek (2)
#include <sys/stat.h>       // open (2)

#define FILENAME       "file_with_hole"
#define MESSAGE_SIZE   512
#define BUFFER_SIZE     10

void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

int main(int argc, char *argv[])
{
    int     fd;
    char    buffer[BUFFER_SIZE];
    char    message[MESSAGE_SIZE];

    /* Create a new file named file_with_hole in the pwd. */
    if ((fd = open(FILENAME, O_WRONLY|O_CREAT|O_TRUNC, 0644)) < 0) {
        sprintf(message, "unable to open file %s for writing", FILENAME);
        fatal_error(errno, message);
    }

    /* Fill buffer with a small string. */
    strncpy(buffer, "0123456789",BUFFER_SIZE);

    /* Write the small string at the beginning of the file. */
    if (write(fd, buffer, BUFFER_SIZE) != BUFFER_SIZE)
        fatal_error(errno, "write");

    /* Seek 1,000,000 bytes past the end of the file. */
    if (lseek(fd, 1000000, SEEK_END) == -1)
        fatal_error(errno, "lseek");

    /* Write the small string at the new file offset. */
    if (write(fd, buffer, BUFFER_SIZE) != BUFFER_SIZE)
        fatal_error(errno, "write");

    /* Close the file. */
    if ( close(fd) == -1 ) {
        sprintf(message, "error closing file %s\n", FILENAME);
        fatal_error(errno, message);
      }

    /* We now have a large file with a big hole. */
    exit(EXIT_SUCCESS);
}
// ./mk_filehole.c
// Creates a file called file_with_hole and writes 0123456789 twice and has 
// a hole of 1,000,000 bytes in between them

/******************************************************************************/

// showid.c
#include <stdio.h>          // printf (3)
#include <unistd.h>         // getuid (2)
#include <sys/types.h>      // getuid (2), getpwuid (3)
#include <pwd.h>            // getpwuid (3)

int main( int argc, char* argv[])
{
    uid_t           userid;
    struct passwd  *psswd_struct;


    /* Get the real user id associated with the process
     * which is the same as that of the user who runs this command.  */
    userid        = getuid();

    /* To get the user name, we retrieve the password structure
     * from the real user id  using the following
     * function.
     */
    psswd_struct  = getpwuid(userid);

    /* Print out the user idw ith the name, in the same format as
     * the  id command:
     */
    printf( "uid=%d(%s)\n", userid, psswd_struct->pw_name);
    return 0;
}
// ./showid
// Output: uid=16134(brandon.cohen42)

/******************************************************************************/

// showusers.c
#define _GNU_SOURCE
#include <stdio.h>          // fprintf (3), printf (3)
#include <stdlib.h>         // exit (3)
#include <unistd.h>         
#include <errno.h>
#include <sys/types.h>      // getuid (2), getpwuid (3)
#include <pwd.h>            // getpwuid (3)

void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

int main( int argc, char* argv[])
{
    /* Declare a passwd structure to store returned record. */
    struct passwd  *psswd_struct;

    /* Initialize the iterator. */
    setpwent();

    /* Set errno to zero to detect errors by getpwent(). */
    errno = 0;

    /* Repeatedly call getpwent() until it returns NULL. */
    while ( (psswd_struct  = getpwent()) != NULL) {
        /* If not NULL, print the pw_name member of the struct. */
        printf("%s\n", psswd_struct->pw_name);
        errno = 0;
    }

    /* Check for an error other than a "no such file" error,
      which is error code ENOENT */
    if ( errno != 0 && errno != ENOENT ) {
        fatal_error(errno, "getpwent");
    }

    /* Close the passwd database. */
    endpwent();
    return 0;
}
// ./showusers
// Output:
/*
zivana.syahputri34
zongming.ke24
zoya.khan18
zuquan.hu46
zuzanna.wishowski25
...
*/

/******************************************************************************/

// showutmp.c
// Displays the contents of the utmp or wtmp file
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>         // strcmp (3)
#include <errno.h>          // errno
#include <fcntl.h>          // open (2)
#include <unistd.h>         // read (2), write (2), close (2)
#include <sys/stat.h>       // open (2)
#include <time.h>
#include <locale.h>
#include <utmpx.h>
#include <paths.h>           // For definition of _PATH_LASTLOG 

void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

/* print_header_row  prints a heading for the output.
            */
void print_header_row( )
{
    printf("%-14s%-.9s%-9s%-9s%9s%-18s%-16s\n","TYPE","USER",
             "ID","LINE"," ","HOST","TIME");
}


/*  print_rec_type prints the string representation of the integer value
    of utmp type  */
void print_rec_type( int t)
{
    switch (t)
    {
    case RUN_LVL:       printf("RUN_LVL       "); break;
    case BOOT_TIME:     printf("BOOT_TIME     "); break;
    case NEW_TIME:      printf("NEW_TIME      "); break;
    case OLD_TIME:      printf("OLD_TIME      "); break;
    case INIT_PROCESS:  printf("INIT_PROCESS  "); break;
    case LOGIN_PROCESS: printf("LOGIN_PROCESS "); break;
    case USER_PROCESS:  printf("USER_PROCESS  "); break;
    case DEAD_PROCESS:  printf("DEAD_PROCESS  "); break;
    case ACCOUNTING:    printf("ACCOUNTING    "); break;
    }
}


/*  print_one() prints the contents of the utmp struct in human readable form.
    The sizes used in the printf below may not display well on all systems.
*/
void print_one( struct utmpx *utbufp )
{
    struct tm * bdtime;
    char   timestring[64];

    print_rec_type(utbufp->ut_type);
    printf("%-8.8s ", utbufp->ut_user);      /* the user name  */
    printf("%-8.8s ", utbufp->ut_id);        /* the id  */
    printf("%-8.8s ", utbufp->ut_line);      /* the tty      */
    printf("%-3d ", utbufp->ut_exit.e_exit);
    printf("%-3d ", utbufp->ut_exit.e_termination);
    if ( utbufp->ut_host[0] != '\0' )
        printf(" %-18s", utbufp->ut_host);   /* the host    */
    else
        printf(" %-18s", " ");

#if __WORDSIZE_TIME64_COMPAT32
    time_t utmp_time =  utbufp->ut_tv.tv_sec;
    bdtime = localtime(&utmp_time);
#else
    bdtime = localtime(&(utbufp->ut_tv.tv_sec));
#endif
    if (bdtime == NULL)
        fatal_error(EOVERFLOW, "localtime");

    /* create a string from the broken down time using the %c format */
    if (0 == strftime(timestring, sizeof(timestring),"%c", bdtime) )
        fatal_error(-1, "Conversion to a date-time string failed "
                    " or produced an empty string\n");
    printf("%s\n", timestring);
}


int main(int argc, char* argv[])
{
    struct utmpx     utmp_entry;          /* read info into here */
    int              fd_utmp;         /* read from this descriptor */
    size_t           utmp_size;

    if ( (argc > 1) && (strcmp(argv[1],"wtmp") == 0) ) {
        if ( (fd_utmp = open(WTMPX_FILE, O_RDONLY)) == -1 )
           fatal_error(errno, "while opening "  WTMPX_FILE);
    }
    else if ( (fd_utmp = open(UTMPX_FILE, O_RDONLY)) == -1 ){
           fatal_error(errno, "while opening "  UTMPX_FILE);
        }

    print_header_row();
    utmp_size = sizeof(utmp_entry);
    while( read(fd_utmp, &utmp_entry, utmp_size) == utmp_size )
        print_one( &utmp_entry );
    close(fd_utmp);
    return 0;
}
// ./showutmp -> prints from utmp
// ./showutmp utmp -> prints from utmp
// ./showutmp wtmp -> prints from wtmp

/******************************************************************************/

// showlastlog.c
// Displays the contents of the lastlog file working with files containing holes
#define _GNU_SOURCE
#include <stdio.h>          // fprintf (3), sprintf (3)
#include <stdlib.h>         // exit (3)
#include <string.h>         // basename (3)
#include <errno.h>          // errno
#include <fcntl.h>          // open (2)
#include <unistd.h>         // read (2), write (2), close (2)
#include <sys/types.h>      // lseek (2), passwd (3), setpwent (3), getpwent (3), endpwent (3)
#include <sys/stat.h>       // open (2)
#include <locale.h>
#include <time.h>
#include <lastlog.h>              // For lastlog structure definition       
#include <paths.h>                // For definition of _PATH_LASTLOG        
#include <pwd.h>                  // For password file iterators            

#define MESSAGE_SIZE   512
#define LOCALE_ERROR   1
#define READ_ERROR     2
#define FORMAT         "%c"

void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

void error_mssge(int code, const char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}

// This function prints a line for a username who has never logged in,
// matching the format of the other lines
void print_never_logged_in(char* uname)
{
    printf("%-16s %-8.8s %-16s **Never logged in**\n", uname, " ", " ");
}


int main(int argc, char *argv[])
{
    struct lastlog ll_entry;      // To store lastlog record read from file
    struct passwd  *psswd_struct; // passwd structure from password file    
    int            ll_fd;         // File descriptor of lastlog file        
    off_t          ll_file_size;  // Size of lastlog file, in bytes         
    size_t         ll_struct_size;// Size in bytes of lastlog structure     
    size_t         num_bytes;     // Number of bytes read in read()         
    uid_t          uid;           // Userid of current search               
    char           *username;     // Username of current search             
    int            highest_uid;   // Highest userid in lastlog file         
    char           *mylocale;     // Pointer to current locale              
    char           lastlog_time[64];// Localized date/time string           
    time_t         ll_time;       // Lastlog time converted to time_t       
    struct tm      *bdtime;       // broken-down time
            

    /* Open the lastlog file and handle potential errors. */
    errno = 0;
    if ( (ll_fd = open(_PATH_LASTLOG, O_RDONLY)) == -1 ) {
        fatal_error(errno, "while opening "  _PATH_LASTLOG);
    }

    /* Get the size of the lastlog file. */
    ll_file_size = lseek(ll_fd,0, SEEK_END);

    /* Get size of lastlog struct. */
    ll_struct_size = sizeof(struct lastlog);

    /* Get highest userid currently stored in lastlog file. */
    highest_uid = ll_file_size/ll_struct_size - 1;

    if ( (mylocale = setlocale(LC_ALL, "") ) == NULL )
        fatal_error( LOCALE_ERROR,
                      "setlocale() could not set the given locale");

    /* Initialize the passwd file iterator. */
    setpwent();

    /* Print a header line, matching the spacing of the data lines. */
    printf("Username         Port     From             Last Login\n");

    while ( (psswd_struct  = getpwent()) != NULL) {
        uid = psswd_struct->pw_uid;
        username = psswd_struct->pw_name;

        if ( uid > highest_uid ) {
            print_never_logged_in(username);
        }
        else {
            if (lseek(ll_fd, uid * ll_struct_size, SEEK_SET) == -1)
                fatal_error(errno, "lseek");

            errno = 0;
            if ((num_bytes = read(ll_fd, &ll_entry, ll_struct_size)) <= 0) {
                if ( 0 != errno ) /* A read error occurred */
                    fatal_error(errno, "read");
                else { /* Not a read error - shouldn't happen but continue */
                    error_mssge(-1,"could not read the entry, skipping");
                    continue;
                }
            }
            else if ( num_bytes != ll_struct_size) {
                fatal_error(READ_ERROR, "Incomplete read of lastlog struct");
            }

            if (0 == ll_entry.ll_time) {
                /* No entry for this user */
                print_never_logged_in(username);
            }
            else {
                /* Convert the lastlog time into broken-down time. */
#if __WORDSIZE_TIME64_COMPAT32
                ll_time = ll_entry.ll_time;
                bdtime = localtime(&ll_time);
#else
                bdtime = localtime(&(ll_entry.ll_time));
#endif

                /* The only possible error is EOVERFLOW, and localtime
                   returns NULL if the error occurred. */
                if (bdtime == NULL)
                    fatal_error(EOVERFLOW, "localtime");

                /* Create a string from the broken down time using the
                   %c format */
                if (0 == strftime(lastlog_time, sizeof(lastlog_time),
                         FORMAT, bdtime) )
                    /* strftime does not set errno. If return is 0, it is an
                       error because we expect a non-zero number of bytes in
                       the output string. */
                    fatal_error(-1, "Conversion to a date-time string failed "
                              " or produced an empty string\n");

                printf("%-16s %-8.8s %-16s %s\n", username, ll_entry.ll_line,
                      ll_entry.ll_host, lastlog_time);
            }
        }
    }
    close(ll_fd);
    exit(EXIT_SUCCESS);
}
// ./showlastlog
// Opens /etc/passwd to look for user in /var/log/lastlog

/******************************************************************************/

// last.c
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>         // strcmp (3), memcpy (3)
#include <errno.h>          // errno
#include <fcntl.h>          // open (2)
#include <unistd.h>         // read (2), write (2), close (2)
#include <sys/stat.h>       // open (2)
#include <time.h>
#include <locale.h>
#include <utmpx.h>
#include <paths.h>           

#define LOCALE_ERROR   1
typedef int BOOL;
#define TRUE 1
#define FALSE 0

#define MAXLEN 256
#define BAD_FORMAT_ERROR 3


// Some systems define a record type of SHUTDOWN_TIME. 
// If it's not defined define it.
#ifndef SHUTDOWN_TIME
    #define SHUTDOWN_TIME 32 /* Give it a value larger than the other types */
#endif


/* Type definition for the linked list of utmpx records. */
struct utmp_list{
    struct utmpx ut;
    struct utmp_list *next;
    struct utmp_list *prev;
};

typedef struct utmp_list utlist;


void fatal_error(int code, const char *msg) {
    fprintf(stderr, "Fatal Error: %s\n", msg);
    exit(code);
}

void error_mssge(int code, const char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
}

void usage_error(const char *msg) {
    fprintf(stderr, "Usage Error: %s\n", msg);
    exit(EXIT_FAILURE);
}


/*  For debugging only, not used in finished program:
    print_rec_type prints the string representation of the integer value
    of utmp type  */
void print_rec_type(int t)
{
    switch (t)
    {
    case RUN_LVL:       printf("RUN_LVL       "); break;
    case BOOT_TIME:     printf("BOOT_TIME     "); break;
    case NEW_TIME:      printf("NEW_TIME      "); break;
    case OLD_TIME:      printf("OLD_TIME      "); break;
    case INIT_PROCESS:  printf("INIT_PROCESS  "); break;
    case LOGIN_PROCESS: printf("LOGIN_PROCESS "); break;
    case USER_PROCESS:  printf("USER_PROCESS  "); break;
    case DEAD_PROCESS:  printf("DEAD_PROCESS  "); break;
    case ACCOUNTING:    printf("ACCOUNTING    "); break;
    }
}

/** get_prev_utrec(fd, ut, done)
    get_prev_utrec(fd, ut) reads one utmpx structure from the current file
    offset  into the address ut and repositions the file offset so that
    the next time it is called it reads the utmpx structure preceding the
    one it just read.
    Returns 1 on successful read and 0 if it could not read.
    If it returns 0, it sets *done to true when it has read the first record
    in the file.
*/
int get_prev_utrec(int fd, struct utmpx *ut, BOOL *finished )
{
    static off_t  saved_offset;    /* Where this call is about to read    */
    static BOOL   is_first = TRUE; /* Whether this is first time called   */
    size_t utsize = sizeof(struct utmpx); /* Size of utmpx struct */
    ssize_t       nbytes_read;     /* Number of bytes read                */

    /* Check if this is the first time it is called.
       If so, move the file offset to the last record in the file
       and save it in saved_offset. */
    if ( is_first ) {
        errno = 0;
        /* Move to utsize bytes before end of file. */
        saved_offset = lseek(fd, -utsize, SEEK_END);
        if ( -1 == saved_offset )  {
            error_mssge(1, "error trying to move offset to last rec of file");
            return FALSE;
        }
        is_first = FALSE; /* Turn off flag. */
    }

    *finished = FALSE;       /* Assume we're not done yet. */
    if ( saved_offset < 0 ) {
        *finished = TRUE;   /* saved_offset < 0 implies we've read entire file. */
        return FALSE;    /* Return 0 to indicate no read took place.         */
    }
    /* File offset is at the correct place to read. */
    errno = 0;
    nbytes_read = read(fd, ut, utsize);
    if ( -1 == nbytes_read ) {
        /* read() error occurred; do not exit - let main() do that. */
        error_mssge(errno, "read");
        return FALSE;
    }
    else if ( nbytes_read < utsize ) {
        /* Full utmpx struct not read; do not exit - let main() do that. */
        error_mssge(2, "less than full record read");
        return FALSE;
    }
    else { /* Successful read of utmpx record */
        saved_offset = saved_offset - utsize; /* Reposition saved_offset. */
        if ( saved_offset >= 0 ) {
            /* Seek to preceding record to set up next read. */
            errno = 0;
            if ( -1 == lseek(fd, - (2*utsize), SEEK_CUR) )
                fatal_error(errno, "lseek()");
        }
        return TRUE;
    }
}

/** format_time_diff(start, finish, str)
    creates a string representing the number of seconds from start to
    finish.
    The string is of the form "(days+HH:MM)" where "days+" is omitted if
    days == 0, and is assigned to the str parameter.
*/
void format_time_diff( time_t start_time, time_t end_time, char* time_diff_str)
{
    time_t secs;
    int    minutes;
    int    hours;
    int    days;

    secs     = end_time - start_time;
    minutes  = (secs / 60) % 60;
    hours    = (secs / 3600) % 24;
    days     = secs / 86400;

    /* If days > 0 then use a different format. */
    if ( days > 0 )
        sprintf(time_diff_str, "(%d+%02d:%02d)", days, hours, minutes);
    else
        sprintf(time_diff_str, "(%02d:%02d)", hours, minutes);
}

/**
    print_one_line(u,t) prints one line of output representing
    the utmpx record u for a session that starts at time u.ut_tv.tv_sec
    and ends at time t, both time_t values.
*/
void print_one_line(struct utmpx *ut, time_t end_time)
{
    time_t     utrec_time;
    struct tm *bd_end_time;
    struct tm *bd_ut_time;
    char       formatted_login[MAXLEN];     /* String storing formatted login date   */
    char       formatted_logout[MAXLEN];    /* String storing formatted logout date  */
    char       duration[MAXLEN];            /* String representig session length     */
    char       *start_date_fmt = "%a %b %d %H:%M";
    char       *end_date_fmt   = "%H:%M";

    utrec_time = (ut->ut_tv).tv_sec;        /* Get login time, in seconds */

    /* If the end time is 0 or -1, print the appropriate string instead of a time */
    if ( ut->ut_type == BOOT_TIME && end_time == 0 )
        sprintf(duration, "still running");
    else if ( ut->ut_type == USER_PROCESS && end_time == 0 )
        sprintf(duration, "still logged in");
    else if ( ut->ut_type == USER_PROCESS && end_time == -1 )
        sprintf(duration, "gone - no logout");
    else /* Calculate and format duration of the session. */
        format_time_diff(utrec_time, end_time, duration);

    bd_ut_time     = localtime(&utrec_time); /* Convert login time to broken-down time. */
    if (bd_ut_time == NULL)
        fatal_error(EOVERFLOW, "localtime");

    if (0 == strftime(formatted_login, sizeof(formatted_login),
             start_date_fmt, bd_ut_time) )
        fatal_error(BAD_FORMAT_ERROR,
                     "Conversion to a date-time string failed or produced "
                        " an empty string\n");
    bd_end_time = localtime(&end_time);   /* Convert end time to broken-down time. */
    if (bd_end_time == NULL)
        fatal_error(EOVERFLOW, "localtime");

    if (0 == strftime(formatted_logout, sizeof(formatted_logout),
             end_date_fmt, bd_end_time) )
        fatal_error(BAD_FORMAT_ERROR,
                     "Conversion to a date-time string failed or produced "
                        " an empty string\n");

    ut->ut_host[sizeof(ut->ut_host)] = '\0';
    printf("%-8.8s %-12.12s %-18s %s - %s %s\n", ut->ut_user, ut->ut_line,
            ut->ut_host, formatted_login, formatted_logout, duration);
}

void save_ut_to_list(struct utmpx *ut,  utlist **list)
{
    utlist* utmp_node_ptr;

    /* Allocate a new list node. */
    errno = 0;
    if ( NULL == (utmp_node_ptr = (utlist*) malloc(sizeof(utlist)) ) )
        fatal_error(errno, "malloc");

    /* Copy the utmpx record into the new node. */
    memcpy(&(utmp_node_ptr->ut), ut, sizeof(struct utmpx));

    /* Attached the node to the front of the list. */
    utmp_node_ptr->next  = *list;
    utmp_node_ptr->prev  = NULL;
    if (NULL != *list)
        (*list)->prev = utmp_node_ptr;
    (*list) = utmp_node_ptr;
}

void delete_utnode(utlist* p, utlist** list)
{
    if ( NULL != p->next )
        p->next->prev = p->prev;

    if ( NULL != p->prev )
        p->prev->next = p->next;
    else
        *list = p->next;
    free(p);
}

void erase_utlist(utlist **list)
{
    utlist *ptr = *list;
    utlist *next;

    while ( NULL != ptr ) {
        next = ptr->next;
        free(ptr);
        ptr = next;
    }
    *list = NULL;
}


int main( int argc, char* argv[] )
{

    struct utmpx  utmp_entry;              /* Read info into here             */
    size_t        utsize = sizeof(struct utmpx); /* Size of utmpx record      */
    int           fd_utmp;                 /* Read from this descriptor       */
    time_t        last_boot_time;          /* Time of last boot or reboot     */
    time_t        last_shutdown_time = 0;  /* Time of last shutdown           */
    time_t        start_time;              /* When wtmp processing started    */
    struct tm    *bd_start_time;           /* Broken-down time representation */
    char          wtmp_start_str[MAXLEN];       /* String to store start time */
    utlist        *saved_ut_recs = NULL;   /* An initially empty list         */
    char          options[] = ":x";        /* getopt string                   */
    int           show_sys_events = FALSE; /* Flag to indicate -x found       */
    char          usage_msg[MAXLEN];       /* For error messages              */

    BOOL          done = FALSE;
    BOOL          found = FALSE;
    char          ch;
    utlist        *p, *next;


    if ( (fd_utmp = open(WTMPX_FILE, O_RDONLY)) == -1 ) {
        fatal_error(errno, "while opening "  WTMPX_FILE);
    }

    /* Check options */
    opterr = 0;  /* Turn off error messages by getopt() */

    while  (TRUE) {
        /* Call getopt, passing argc and argv and the options string. */
        ch = getopt(argc, argv, options);
        if ( -1 == ch ) /* It returns -1 when it finds no more options.  */
            break;

        switch ( ch ) {
        case 'x':
            show_sys_events = TRUE;
            break;

        case '?' :
        case ':' :
            fprintf(stderr,"Found invalid option %c\n", optopt);
            sprintf(usage_msg, "%s [ -x ]", basename(argv[0]));
            usage_error(usage_msg);
            break;
        }
    }

    /* Set the locale. */
    char*  mylocale;
    if ( (mylocale = setlocale(LC_TIME, "") ) == NULL )
        fatal_error( LOCALE_ERROR, "setlocale() could not set the given locale");

    /* Read the first structure in the file to capture the time of the
       first entry. */
    errno = 0;
    if ( read(fd_utmp, &utmp_entry, utsize) != utsize )
        fatal_error(errno, "read");

    start_time = utmp_entry.ut_tv.tv_sec ;

    /* Process the wtmp file */
    while ( !done ) {
        errno = 0;
        if ( get_prev_utrec(fd_utmp, &utmp_entry, &done)  ) {
            /*
               What type of record is this?
               For ordinary user logins, the ut_type field will be USER_PROCESS
               but for shutdown events, there is no SHUTDOWN_TIME.
               We can identify a shutdown record by the line being ~ and
               the username being "shutdown".
             */

            if ( (strncmp(utmp_entry.ut_line, "~", 1) == 0) &&
                 (strncmp(utmp_entry.ut_user, "shutdown", 8) == 0) ) {
                utmp_entry.ut_type = SHUTDOWN_TIME;
                sprintf(utmp_entry.ut_line, "system down");
            }

            switch (utmp_entry.ut_type) {
            case BOOT_TIME:
                strcpy(utmp_entry.ut_line, "system boot");
                print_one_line(&utmp_entry, last_shutdown_time);
                last_boot_time = utmp_entry.ut_tv.tv_sec;
                if ( saved_ut_recs != NULL )
                    erase_utlist(&saved_ut_recs);
                break;

            case RUN_LVL:
                break;
            case SHUTDOWN_TIME:
                last_shutdown_time = utmp_entry.ut_tv.tv_sec;
                if ( show_sys_events )
                    print_one_line(&utmp_entry, last_boot_time);
                if ( saved_ut_recs != NULL )
                    erase_utlist(&saved_ut_recs);
                break;
            case USER_PROCESS:
                /* Find the logout entry for this login in the saved_ut_recs
                   list. This should be the entry closest to the front of the
                   list with the same ut_line field. */
                found = TRUE;
                p = saved_ut_recs; /* start at beginning */
                while ( NULL != p ) {
                    next = p->next;
                    if ( 0 == (strncmp(p->ut.ut_line, utmp_entry.ut_line,
                        sizeof(utmp_entry.ut_line)) ) ) {
                        /* The saved node's ut_line matches the one we just found */
                        print_one_line(&utmp_entry, p->ut.ut_tv.tv_sec);
                        found = TRUE;
                        delete_utnode(p, &saved_ut_recs); /* Delete the node */
                    }
                    p = next;
                }
                if ( !found ) {
                    /* No logout record found for this login.
                       If the system was not shut down after this login,
                       there is no record because the user is still
                       logged in.
                       If the system was shut down at any time after this login,
                       the user cannot still be logged into the same session.
                       If there is no saved logout record, it implies that
                       the session ended in an abnormal way and the output
                       should just indicate the user is "gone".
                     */
                    if ( last_shutdown_time > 0 )
                        print_one_line(&utmp_entry, (time_t) -1);
                    else
                        print_one_line(&utmp_entry, (time_t) 0);
                }
                break;
            case DEAD_PROCESS:
                /* Create a node in the saved_ut_recs list for this entry,
                   provided that the ut_line field is not null. */
                if ( utmp_entry.ut_line[0] == 0 )
                    /* There is no line in the entry, so skip it. */
                    continue;
                else
                    save_ut_to_list(&utmp_entry, &saved_ut_recs);
                break;

            case OLD_TIME:
            case NEW_TIME:
            case INIT_PROCESS:
            case LOGIN_PROCESS:
                break;

            }
        }
        else /* get_prev_utrec() did not read. */
            if ( !done )
                fatal_error(2, " read failed");

    }
    erase_utlist(&saved_ut_recs);
    close(fd_utmp);

    bd_start_time = localtime(&start_time);
    if (0 == strftime(wtmp_start_str, sizeof(wtmp_start_str),
         "%a %b %d %H:%M:%S %Y", bd_start_time) )
    fatal_error(BAD_FORMAT_ERROR,
                 "Conversion to a date-time string failed or produced "
                    " an empty string\n");
    printf("\nwtmp begins %s\n", wtmp_start_str);
    return 0;
}
// ./last