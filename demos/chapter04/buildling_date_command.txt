--------------------------------------------------------------------------------                                        Version 1
--------------------------------------------------------------------------------
1. Get current time
2. Format the time in tha default form of the dte command, store to string
3. print the string on standard output


Find the keywords to find the date and time
-----------------------------------------------------------
$ apropos -s1 date      // for exact, add option -e
$ date                  // prints current date, time and day
$ date -d'next Thu'     // option -d can be added string input
$ date -d'5 years ago'
$ date +"%A, %D"     // locale's date and time
$ date +"It is %A at &R."   // full day name, 24-hour time
-----------------------------------------------------------

Unix have 2 types of time
- Process time: time a process spends in the CPU
- Real time: from some reference point
    Calender time is real time with respect to epoch defined as Jan 1, 1970
    UTC is shot for Coordinated Universal Time

Broken down time consolidates all the information of time into a single data structure called struct tm.
-----------------------------------------------------------
struct tm {
    int tm_sec;     /* Seconds (0-60) */
    int tm_min;     /* Minutes (0-59) */
    int tm_hour;    /* Hours (0-23) */
    int tm_mday;    /* Day of the month (1-31) */
    int tm_mon;     /* Month (0-11) */
    int tm_year;    /* Year - 1900 */
    int tm_wday;    /* Day of the week (0-6, Sunday = 0) */
    int tm_yday;    /* Day in the year (0-365, 1 Jan = 0) */
    int tm_isdst;   /* Daylight saving time */
};
-----------------------------------------------------------

The time(7) man page suggests two different sycall to get calender time
- clock_gettime(): provide time clock in nanoseconds, use struct timespec
- time(): returns the number of seconds since the Epoch, use time_t
But because our program don't need sub-second granularity, we can use the time()

* Whenever a feature is marked perecated in documnetation, avoid using it



Time conversion function

The functions asctime, ctime, gmtime, localtime, mktimeare all described ont he same man page
They transform date and time to broken-down time or ASCII
-----------------------------------------------------------
#include <time.h>
  char *asctime(const struct tm *tm);     // take broken-down time struct, return string
  char *ctime(const time_t *timep);       // take time_t value, returns a string
  struct tm *gmtime(const time_t *timep); // both take time_t, return a pointer
  struct tm *localtime(const time_t *timep); // to a broken-down time struct
  time_t mktime(struct tm *tm);
-----------------------------------------------------------

With these, we have now build the spl_date1.c









--------------------------------------------------------------------------------                                        Version 2
--------------------------------------------------------------------------------
Now, we will add variable to make it usable different date formats from command lines.

As example is 
-----------------------------------------------------------
$ spl_date +"Today is %A. Current time: %R"
Today is Sunday. Current time: 13:45
-----------------------------------------------------------

With this, what we need is
- a variable to store a format string
- instead of calling strftime() witih teh hard-coded format, we will do
-----------------------------------------------------------
strftime(formatted_date, sizeof(formatted_date), format_str, broken_down_time)
-----------------------------------------------------------

We have to check if the user give arguments for the option, the logic as below
-----------------------------------------------------------
if (argc < 2) 
  strcpy(format_str, FORMAT);
else {
  if (argv[1][0] == '+') 
    if (strlen(argv[1]+1) < MAXLEN)
      strcpy(fprmat_str, argv[1]+1, MAXLEN-1);
    else {
      fprint(stderr, "%s: format string length is too long\n", basename(argv[0]));
      exit(EXIT_FAILURE);
    } else {
      fprint(stderr, "%s: fromat should be +\"format-string\"\n", basename(argv[0]));
      exit(EXIT_FAILURE);
    }
}
-----------------------------------------------------------

With these, we have now build the spl_date2.c








--------------------------------------------------------------------------------                                        Version 3
--------------------------------------------------------------------------------
Add the ability to display date sin the past and future


So the command should be able to accept
-----------------------------------------------------------
$ spl_date3 [-h] | [-d "time-adjustment"] [+"format-specification"]
-----------------------------------------------------------
[-h]                    option to ignore all other words on the command line
[time-adjustment]       the part we will be focusing on for this version
[format-specification]  the same as it was in spl_date2

For the time adjustment, we will be using customary units and not phrase.
Customary units as years, months, weeks, days, hours, minutes, and seconds.
We will also forbrid double value, only as int
-----------------------------------------------------------
1 year 4 months -2 days -3 weeks +1 day
-----------------------------------------------------------

The synopsis will be as below
-----------------------------------------------------------
time-adjustment = <num> <time-unit> [<num> <time-unit> ... ]
num             = [+|-]<integer>
time-unit       = year[s] month[s] week[s] day[s] hour[s] minute[s] second[s]
integer         = [1-9][0-9]...
-----------------------------------------------------------


The program logic,
- add option parsing
- parse time adjustment, if present, added from the current time
- add time adjustment to currrent time and display the resulting time

To do it, we will have to do these steps,
1. Parse command line, check if -d or -h options are present
2. If -h, ignore other arguments and options, print help information, exit.
3. If -d, allocate memory and copy the argument into that memory.
4. If there's format specification, copy to string of sufficient size.
5. Obtain and store the current time into a time_t variable using time().
6. Convert current time into broken-down time representation using localtime().
7. If -d is present, parse the argument, 
    creating a temporary brokendown time structure that 
    stores the time to add to the current time
in terms of years, months, days, and so on, and add the value of the
temporary structure to the broken-down current time.
8. Use the strftime() to format output string representation of broken-down time.
9. Print the formatted string using printf().

With these, we will need function to 
- receive a time-adjustment string as input and 
- create broken-down time representation as output
-----------------------------------------------------------
int parse_time_adjustment( /* IN */ char* time_adjust_string,
                           /* OUT */ struct tm* datetm );
-----------------------------------------------------------

With this in minde, we will be using strtok() as it also accept delimeter.
So it will looks like
-----------------------------------------------------------
char* delim = " \t";      /* Space and tab */
char* token;              /* Returned token */
int number;               /* To store number token */
char err_msg[STRING_MAX]; /* For error messages */
int flags = ONLY_DIGITS | NO_TRAILING;
int res;                  /* Return value of get_int() */

token = strtok(time_adjust_string, delim);
  while ( token != NULL ) {
    res = get_int(token, flags, &number, err_msg ); /* Get number */
    /* If error, handle it. */

    token = strtok(NULL, delim); /* Get time unit, such as year, month. */
    /* If error, handle it. */

    /* Add number of time units to appropriate member of datetm . */
    token = strtok(NULL, delim); /* Try to get the next number. */
}
-----------------------------------------------------------


Updated, this is how it will looks like
-----------------------------------------------------------
int parse_time_adjustment(char* time_adjust_string, struct tm* datetm) {

char* delim = " \t";      /* Space and tab */
char* token;              /* Returned token */
int number;               /* To store number token */
char err_msg[STRING_MAX]; /* For error messages */
int flags = ONLY_DIGITS | NO_TRAILING;
int res;                  /* Return value of get_int() */

token = strtok(time_adjust_string, delim);
  while ( token != NULL ) {
    res = get_int(token, flags, &number, err_msg ); /* Get number */

    /* If error, handle it. */
    if (VALID_NUMBER != res) 
      fatal_errro(res, err_msg);

    /* Number is quantity of time-adjustment unit to be found next
      get next token in time adjustment, should be a time unit. */
    token = strtok(NULL, delim); /* Get time unit, such as year, month. */

    /* If error, handle it. */
    if ( NULL == token )
      fatal_error(TIME_ADJUST_ERROR, "missing a time unit\n");

    if ( NULL != strstr(token, "year"))         datetm->tm_year += number;
    else if ( NULL != strstr(token, "month"))   datetm->tm_mon += number;
    else if ( NULL != strstr(token, "week"))    datetm->tm_mday += 7*number;
    else if ( NULL != strstr(token, "day"))     datetm->tm_mday += number;
    else if ( NULL != strstr(token, "hour"))    datetm->tm_hour += number;
    else if ( NULL != strstr(token, "minute"))  datetm->tm_min += number;
    else if ( NULL != strstr(token, "second"))  datetm->tm_sec += number;
    else
      fatal_error(TIME_ADJUST_ERROR, "Found invalid time time_unit in amount to adjust the time\n");

    /* Add number of time units to appropriate member of datetm . */
    token = strtok(NULL, delim); /* Try to get the next number. */
  }
  return 0;
}




-----------------------------------------------------------
-----------------------------------------------------------