In this chapter, we will explora API related to directories and the direcotry hierarchy.

To check if the file listed is a directory or a file, the function we uses are 


----------------------------------------------------------------------------------------
// concatenate file and send to output, but will fail because mydir is a directory
$ cat mydir 
cat: mydir: Is a directory
----------------------------------------------------------------------------------------
// showing that both files are in the current directory
$ ls myfile yourfile
myfile yourfile
----------------------------------------------------------------------------------------
$ apropos -s2,3 -e -a read directory
readdir (2) - read directory entry
readdir (3) - read a directory
readdir (3posix) - read a directory
readdir_r (3) - read a directory
----------------------------------------------------------------------------------------
testdircalls.c



----------------------------------------------------------------------------------------
readdir(2)
// read directory entries
// int readdir(unsigned int fd, struct old_linux_dirent *dirp, unsigned int count);
// struct old_linux_dirent {
//   long  d_ino;              /* inode number */
//    off_t d_off;              /* offset to this old_linux_dirent */
//    unsigned short d_reclen;  /* length of this d_name */
//    char  d_name[NAME_MAX+1]; /* filename (null-terminated) */
// }
----------------------------------------------------------------------------------------
getdents(2)
----------------------------------------------------------------------------------------
char filename[NAME+MAX+1];
----------------------------------------------------------------------------------------
#ifdef _DIRENT_HAVE_D_TYPE
  we have d_type member so we can get type information with it
#else
  we don't have d_type; we need to call stat() to get type
#endif
----------------------------------------------------------------------------------------
typedef struct __dirstream DIR;
----------------------------------------------------------------------------------------
opendir(3)
----------------------------------------------------------------------------------------
spl_ls1.c









----------------------------------------------------------------------------------------
$ ls -gG testing/dir3 # The -gG supresses owner and group information.
total 12
drwxr-xr-x 3 4096 Sep 27 10:26 dir1/
drwxr-xr-x 2 4096 Sep 27 10:27 dir2/
d-wx--x--x 2 4096 Sep 27 10:36 dir3/
--snip--
----------------------------------------------------------------------------------------
#include <sys/types.h>
#include <dirent.h>
void rewinddir(DIR *dirp);  // reset the directory stream
long telldir(DIR *dirp); // return current location in directory stream
void seekdir(DIR *dirp, long loc);  // set position of the next readdir() in the directory stream
----------------------------------------------------------------------------------------
/* Linked list node that stores an offset returned by telldir(). */
typedef struct listnode{
  long pos; /* The offset */
  struct listnode *next; /* Pointer to nextnode in list */
} poslist; /* Pointer to a list */
/** save(p, &pos_listptr) saves position p onto the end of the list
  pointed to by pos_listptr. Because the list head might be
  changed, its address is passed, not its value. */
void save(long pos, poslist **list);
/* printlist(dirp, pos_list) prints the filenames whose offsets were
  saved into pos_list. */
void printlist(DIR* dirp, poslist *list)
/* eraselist(&list) erases the list pointed to by list. */
void eraselist(poslist **list)
----------------------------------------------------------------------------------------
#include <dirent.h>
int scandir(const char *dirp, struct dirent* **namelist,  // pointer to dir name, to array,
                                        // type dirent is basically the dir entry
  int (*filter)(const struct dirent *),      // pointer to function that is callede by scandir
  int (*compar)(const struct dirent **, const struct dirent **)); // pointer to function 
  int alphasort(const struct dirent **a, const struct dirent **b);
int versionsort(const struct dirent **a, c
onst struct dirent **b);
----------------------------------------------------------------------------------------
int skipdot( const struct dirent *direntp)
{
  if (strcmp(direntp->d_name, ".") == 0 || strcmp(direntp->d_name, "..") == 0)
    return 0;
  else
    return 1;
}
----------------------------------------------------------------------------------------
int (*compar)(const struct dirent **, const struct dirent **)
----------------------------------------------------------------------------------------
struct dirent* *dp_array; /* Not struct dirent* dp_array[] */
----------------------------------------------------------------------------------------
int returnval = scandir("/home/snw/", &dp_array, skipdot, alphasort);
----------------------------------------------------------------------------------------
scandir_manpage_example.c









----------------------------------------------------------------------------------------
int dirsfirstsort(const struct dirent **a, const struct dirent **b)
{
  if ( isdir(*a) )
    if (! isdir(*b) ) /* a is a directory but b is not. */
      return -1;
    else /* Both a and b are directories; sort alpabetically. */
      return (alphasort(a,b));
  else
    if ( isdir(*b) ) /* b is a directory but a is not. */
      return 1;
    else /* Neither a nor b is a directory; sort alpabetically. */
      return (alphasort(a,b));
}
----------------------------------------------------------------------------------------
int scan_one_dir(const char* dirname, void (*process)(const struct dirent*))
{
  struct dirent **namelist; /* An array of pointers to dirent structs */
  int i,n;
  errno = 0;
  if ( (n = scandir(dirname, &namelist, NULL, dirsfirstsort) ) < 0)
    fatal_error(errno, "scandir");
  for (i = 0; i < n; i++){ /* Process every entry saved into namelist. */
    process(namelist[i]); /* Process this dirent structure. */
    free(namelist[i]); /* Free the dirent structure. */
  }
  free(namelist); /* Free the namelist array that was allocated by scandir(). */
  return(EXIT_SUCCESS);
}
----------------------------------------------------------------------------------------
spl_ls3.c









----------------------------------------------------------------------------------------
$ spl_ls3 testing
testing:
./
../
dir1/
dir2/
dir3/
file1
file2
file3
----------------------------------------------------------------------------------------
$ du testing
4 testing/dir3
4 testing/dir1/adir
8 testing/dir1
4 testing/dir2
32 testing
----------------------------------------------------------------------------------------
$ mount device directory
----------------------------------------------------------------------------------------
$ mount /dev/hdb /data/c
----------------------------------------------------------------------------------------
$ df --output=source,target // report file system space usage
--snip--
/dev/sdc2 /
/dev/sdd3 /var
/dev/sdb3 /home
/dev/sdc1 /boot
/dev/sdd4 /data/research_resources/physics/articles/more_articles
----------------------------------------------------------------------------------------
$ pwd # To see what our working directory is
/home/stewart/unixbook/demos
$ df --output=source,target .
Filesystem    Mounted on
/dev/sdb3     /home
----------------------------------------------------------------------------------------
$ mount -t ext4
--snip--
/dev/sdc2 on / type ext4 (rw,relatime,errors=remount-ro)
/dev/sdd3 on /var type ext4 (rw,relatime)
/dev/sdb3 on /home type ext4 (rw,relatime)
/dev/sdc1 on /boot type ext4 (rw,relatime,stripe=4)
/dev/sdd4 on /data/research_resources/physics/articles/more_articles ...
----------------------------------------------------------------------------------------
$ findmnt -t ext4 -o SOURCE,TARGET
SOURCE      TARGET
--snip--
/dev/sdc2   /
/dev/sdb4   /data
/dev/sdd4   /data/research_resources/physics/articles/more_articles
/dev/sdd3   /var
/dev/sdb3   /home
/dev/sdc1   /boot
----------------------------------------------------------------------------------------
$ ln /data/a/doc1 /data/c/students/grad/doc1
----------------------------------------------------------------------------------------
while ( !done ) {
  errno = 0;
  direntp = readdir( dirp );
  if ( direntp == NULL && errno != 0 )
    perror("readdir");
  else if ( direntp == NULL )
    done = TRUE;
  else
    printf(" %s\n", direntp->d_name );
}
----------------------------------------------------------------------------------------
printf("%s\n",direntp->d_name);
if ( isdir(direntp) ) {
  subdirp = opendir(direntp->d_name);
  listdir(subdirp, flags);
  closedir(subdirp);
}
----------------------------------------------------------------------------------------
$ spl_ls1 jammy
----------------------------------------------------------------------------------------
spl_ls_rec.c









----------------------------------------------------------------------------------------
$ spl_ls_rec testing
testing:
testing/dir1
testing/dir1/b
testing/dir1/adir
testing/dir1/adir/d
testing/dir1/c
testing/file3
testing/file1
testing/dir3
testing/file2
testing/dir2
testing/dir2/b2
testing/dir2/a1
----------------------------------------------------------------------------------------
int scan_one_dir(const char* dirname )
{
  struct dirent **namelist;
  int i, n;
  char pathname[PATH_MAX];
  errno = 0;
  if ( (n = scandir(dirname, &namelist, NULL, alphasort) ) < 0)
    fatal_error(errno, "scandir");
  for (i = 0; i < n; i++) {
    if (strcmp(namelist[i]->d_name, ".") != 0
      && strcmp(namelist[i]->d_name, "..") != 0) {
      printf("%s/%s\n",dirname,namelist[i]->d_name);
      if ( isdir(namelist[i]) ) {
        sprintf(pathname, "%s/%s", dirname, namelist[i]->d_name);
        scan_one_dir(pathname);
      }
    }
    free(namelist[i]);
  }
  free(namelist);
  return(EXIT_SUCCESS);
}
----------------------------------------------------------------------------------------
$ spl_ls_rec2 testing
testing:
testing/dir1
testing/dir1/adir
testing/dir1/adir/d
testing/dir1/b
testing/dir1/c
testing/dir2
testing/dir2/a1
testing/dir2/b2
testing/dir3
testing/file1
testing/file2
testing/file3
----------------------------------------------------------------------------------------
$ du -a testing
0 testing/dir1/b
0 testing/dir1/adir/d
4 testing/dir1/adir
0 testing/dir1/c
8 testing/dir1
4 testing/file3
4 testing/file1
4 testing/dir3
4 testing/file2
0 testing/dir2/b2
0 testing/dir2/a1
4 testing/dir2
32 testing
----------------------------------------------------------------------------------------
ftw, nftw // file tree walk
int nftw(const char *dirpath, 
    // fpath (pathname), sb (pointer to the stat)
    int (*fn)(const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf),
    int nopenfd, int flags);
    //nopenfd specifies the max num of dir that nftw() will hold open simultaneously
----------------------------------------------------------------------------------------
struct FTW {
  int base; // offset of the filename
  int level;  // depth of fpath in the dir tree relative to the root
};
----------------------------------------------------------------------------------------
$ prlimit -n      // get and set process resource limitis
RESOURCE DESCRIPTION SOFT HARD UNITS
NOFILE max number of open files 1024 1048576 files
----------------------------------------------------------------------------------------
nftw_demo.c









----------------------------------------------------------------------------------------
testdir
  linktosubdir1 -> subdir1
  subdir1
    subsubdir1
      link2tosubdir1 -> ../../subdir1
      subsubsubdir1
        testfile1
        testfile2
    subsubdir2
  subdir2
----------------------------------------------------------------------------------------
$ nftw_demo -p testdir
testdir
  linktosubdir1 (symbolic link)
  subdir2
  subdir1
    subsubdir2
    subsubdir1
      link2tosubdir1 (symbolic link)
      subsubsubdir1
        testfile1
        testfile2
----------------------------------------------------------------------------------------
$ nftw_demo testdir
testdir
  linktosubdir1
    subsubdir2
    subsubdir1
      subsubsubdir1
        testfile1
        testfile2
  subdir2
----------------------------------------------------------------------------------------
#define MAXDEPTH 50 /* some large number to be determined */
static uintmax_t total_usage[MAXDEPTH];
----------------------------------------------------------------------------------------
int file_usage(const char *fpath, const struct stat *sb, int tflag, struct FTW *ftwbuf)
----------------------------------------------------------------------------------------
spl_du.c









----------------------------------------------------------------------------------------
$ du -a testdir
4 testdir/subdir2
0 testdir/subdir1/subsubdir1/subsubsubdir1/testfile2
0 testdir/subdir1/subsubdir1/subsubsubdir1/testfile1
4 testdir/subdir1/subsubdir1/subsubsubdir1
0 testdir/subdir1/subsubdir1/link2tosubdir1
8 testdir/subdir1/subsubdir1
4 testdir/subdir1/subsubdir2
16 testdir/subdir1
0 testdir/linktosubdir1
24 testdir
----------------------------------------------------------------------------------------
$ spl_du testdir
4 testdir/subdir2
0 testdir/subdir1/subsubdir1/subsubsubdir1/testfile2
0 testdir/subdir1/subsubdir1/subsubsubdir1/testfile1
4 testdir/subdir1/subsubdir1/subsubsubdir1
0 testdir/subdir1/subsubdir1/link2tosubdir1 (symbolic link)
0 testdir/subdir1/subsubdir1/testfile1.lnk
8 testdir/subdir1/subsubdir1
4 testdir/subdir1/subsubdir2
16 testdir/subdir1
0 testdir/linktosubdir1 (symbolic link)
24 testdir
----------------------------------------------------------------------------------------
$ ls -s testdir2/d1
560
----------------------------------------------------------------------------------------
$ cd testdir2; ln d1 d2 ; ln d1 d3
$ cd ..
----------------------------------------------------------------------------------------
$ spl_du testdir2
560 testdir2/d1
560 testdir2/d3
560 testdir2/d2
1684 testdir2
----------------------------------------------------------------------------------------
typedef unsigned long long hash_val;
BOOL insert_hash ( hash_table* h, hash_val val );
BOOL is_in_hash ( hash_table h, hash_val val);
void init_hash ( hash_table* h, int initial_size );
void free_hash ( hash_table* h);
----------------------------------------------------------------------------------------
static uintmax_t total_usage[MAXDEPTH]; /* Total disk usage for level n */
static hash_table visited; /* Set of inodes already visited */
----------------------------------------------------------------------------------------
spl_du2.c









----------------------------------------------------------------------------------------
$ spl_du2 testdir2
560 testdir2/d2
564 testdir2
----------------------------------------------------------------------------------------
FTS *fts_open(char * const *path_argv, int options,
int (*compar)(const FTSENT **, const FTSENT **));
FTSENT *fts_read(FTS *ftsp);
FTSENT *fts_children(FTS *ftsp, int instr);
int fts_set(FTS *ftsp, FTSENT *f, int instr);
int fts_close(FTS *ftsp);
----------------------------------------------------------------------------------------
typedef struct _ftsent {
  unsigned short fts_info;     /* flags for FTSENT structure */
  char *fts_accpath;           /* access path */
  char *fts_path;              /* root path */
  short fts_pathlen;           /* strlen(fts_path) */
  char *fts_name;              /* filename */
  short fts_namelen;           /* strlen(fts_name) */
  short fts_level;             /* depth (-1 to N) */
  int fts_errno;               /* file errno */
  long fts_number;             /* local numeric value */
  void *fts_pointer;           /* local address value */
  struct ftsent *fts_parent;   /* parent directory */
  struct ftsent *fts_link;     /* next file structure */
  struct ftsent *fts_cycle;    /* cycle structure */
  struct stat *fts_statp;      /* stat(2) information */
} FTSENT;
----------------------------------------------------------------------------------------
#include "common_hdrs.h"
#include <fts.h>
int namecmp(const FTSENT **s1, const FTSENT **s2)
{
  return (strcoll((*s1)->fts_name, (*s2)->fts_name));
}
----------------------------------------------------------------------------------------
fts_demo.c









----------------------------------------------------------------------------------------
$ fts_demo testdir
    4096  testdir
    7       testdir/linktosubdir1
    18893   testdir/newfile
    4096    testdir/subdir1
    4096      testdir/subdir1/subsubdir1
    13           testdir/subdir1/subsubdir1/link2tosubdir1
    4096         testdir/subdir1/subsubdir1/subsubsubdir1
    0              testdir/subdir1/subsubdir1/subsubsubdir1/testfile1
    0            testdir/subdir1/subsubdir1/testfile1.lnk
    4096       testdir/subdir1/subsubdir2
    4096     testdir/subdir2
Largest file: testdir/newfile; Size=18893
----------------------------------------------------------------------------------------







----------------------------------------------------------------------------------------
// output the file name and the inode
$ ls -iaR scratch
725 .
449 ..
753 README
727 work
728 misc

731 .
728 ..
733 TODOLIST
732 tests

727 .
725 ..
729 info
730 prog1
733 TODO

728 .
725 ..
731 tests
748 prog2
729 docs
// by the end, we find the relation of the dir and file based on the . and ..
----------------------------------------------------------------------------------------
typedef struct device_inode_pair
{
  dev_t dev;
  ino_t ino;
} dev_ino;
----------------------------------------------------------------------------------------
$ pwd
/home/snw/teaching/lsp_book/demos/chap_dir_hierarchy
----------------------------------------------------------------------------------------
#include <unistd.h>
int chdir(const char *path);
int fchdir(int fd);
----------------------------------------------------------------------------------------
BOOL are_samefile(dev_ino f1, dev_ino f2)
{
  return ( f1.ino == f2.ino && f1.dev == f2.dev );
}
----------------------------------------------------------------------------------------
{
  struct stat sb;
  errno = 0;
  if ( -1 == lstat( fname , &sb ) )
    fatal_error(errno, "Cannot stat ");
  dev_inode->dev = sb.st_dev;
  dev_inode->ino = sb.st_ino;
}
----------------------------------------------------------------------------------------
dirp = opendir("."); /* Open parent directory */
while ( ( direntp = readdir( dir_ptr ) ) != NULL ) {
  get_dev_ino(direntp->d_name, &this_entry);
  if ( are_samefile( this_entry, dir_dev_ino) ) {
    /* found the matching entry */
  else
    /* keep searching */
  }
}
----------------------------------------------------------------------------------------
len = strlength{dirname};
----------------------------------------------------------------------------------------
char* get_filename( dev_ino child_entry)
{
  DIR *dir_ptr; /* The directory to be opened */
  struct dirent *direntp; /* The dirent for each entry */
  dev_ino this_entry; /* The dev_ino pair for the entry */
  char errmssge[256];/* To store error messages */
  int len; /* Length of a string */
  char* fname; /* malloc-ed name to return to caller */

  errno = 0;
  dir_ptr = opendir( "." );
  if ( dir_ptr == NULL )
    fatal_error(errno, "opendir" );

  /* Search through the current working directory for a file whose
    inode number and device ID are that of entry.*/
  while ( ( direntp = readdir( dir_ptr ) ) != NULL ) {
    errno = 0;
    get_dev_ino(direntp->d_name, &this_entry);
    /* If this entry matches, we found the file. */
    if ( are_samefile( this_entry, child_entry) ) {
      /* Copy the entry's d_name into a malloc-ed fname. */
      len = strlen(direntp->d_name);
      errno = 0;
      if ( NULL == (fname = malloc(len+1)) )
        fatal_error(errno, "malloc");
      strncpy(fname, direntp->d_name, len);
      closedir( dir_ptr );
      return fname;
    }
  }
  /* If we reach here, there is no matching entry in this directory. */
  sprintf(errmssge, "i-number %lu not found.\n", child_entry.ino);
  error_mssge(-1, errmssge);
  return NULL;
}
----------------------------------------------------------------------------------------
$ spl_pwd
Error: File name too long
..../teaching/lsp_book/demos/chap_dir_hierarchy
----------------------------------------------------------------------------------------
spl_pwd.c









----------------------------------------------------------------------------------------
$ spl_pwd
/data/research_resources/physics/articles/more_articles/quantumstuff
$ pwd
/data/research_resources/physics/articles/more_articles/quantumstuff
----------------------------------------------------------------------------------------
$ df --output=source,target . /data
Filesystem    Mounted on
/dev/sdd4     /data/research_resources/physics/articles/more_articles
/dev/sdb4     /data
----------------------------------------------------------------------------------------
