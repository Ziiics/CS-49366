Advanced concept of I/O

lseek() is to repositions the file offset.
off_t lseek(int fd, off_t offset, int whence);
  - fd: file descriptor 
  - offset: argument offset according to the directive  
  - whence: the directive accordance to offset as follow,
    - SEEK_SET: file offset is set to offset bytes.
    - SEEK_CUR: is set to its current location plus offset bytes.
    - SEEK_END: The file offset is set to the size of the file plus offset bytes.

lseek() allows the file offset to be set beyond the end of the file (does not change the size of the file).
It check the end of the file with inode

Some usage example
---------------------------------------------------------------------
off_t current_pos = lseek(fd, 0, SEEK_CUR);
off_t size = lseek(fd, 0, SEEK_END);  // fd is the file name
---------------------------------------------------------------------

File hole: a part of the data that have nothing in it because we only put data on the first byte and the last byte of the file.
This is not an error, it will only output 0.

  * Check out makefilehole.c 

To check file size, we can use 
- stat() to check the file or file system status, can choose format to count the size of
- ls() -l to check the reular byte size
- du() estimate size usage
block size is 24

  * od() dump files in octal and any other format 
  * od can see the file based on the byte number 

Even file hole make the file is a big size in bytes, but the storage they actually tak ein the disk is not as much.

  * Most system block is 4096 in size *
  * 1 million of parent bytes in size *


Sparse file: when the fiels appear to be large size but really ise only a small fraction of that size.

To get all the login information 
- lastlog(8) - administration command that shows whoever trying to log in,
  search back through the /var/log/wtmp file
  we can also give the username
  this is usually kept in the file because it is updated on specific range of time 
  only save to file if it is told to save
  then use utmp() to read the file.
- last(1) - showing the time when the user come in and show the time also
  mention that the database dile is sparse,
  the never logged in people are all inputted as 0 in the file
  caveatL

  * path.h is made when the OS is built and it list all the important file only for executable


userid is the 3rd part, and goroup is the 4th part of the list from the command ypcat
---------------------------------------------------------------------
$ ypcat passwd    // to show a list of the user id
---------------------------------------------------------------------
$ ypcat passwd | cut -d: -f3 | sort -n |wc -l
---------------------------------------------------------------------
  [-d] delimeter
  [-f3] on the 3rd field
There is entry for every userid, even if they never logged in.
*yp actually means yellowpage

try
---------------------------------------------------------------------
cpp -v /dev/null -o /edv/null | grep 'search satrts'
---------------------------------------------------------------------






* sed is string editor (for testing codes to check if its good or bad)
---------------------------------------------------------------------
if _WORDSIZE_TIME64_COMPAT32
---------------------------------------------------------------------
This is the first time we will implement macros that change the behavior of 
the computer. It changes the size to 32bits when a 64bytes computer is 
compatible but not attempt to do the 32bytes.

To get the username when its like this, 
---------------------------------------------------------------------
struct lastlog
{
  #if __WORDSIZE_TIME64_COMPAT32
    int32_t ll_time;
  #else
    __time_t ll_time;
  #endif
  char ll_line[UT_LINESIZE];    // have all the information 
  char ll_host[UT_HOSTSIZE];    // but because the bytes is small
};                            // it doesnt contain the username
---------------------------------------------------------------------
we find the uid and divided the value to get the username.
getpwid() to get the username based on the known uid

---------------------------------------------------------------------
struct passwd {
  char *pw_name; /* username */
  char *pw_passwd; /* user password */
  uid_t pw_uid; /* user ID */
  gid_t pw_gid; /* group ID */
  char *pw_gecos; /* user information */
  char *pw_dir; /* home directory */
  char *pw_shell; /* shell program */
};
---------------------------------------------------------------------

* the _r function mena sthat it is NOT thread safe
* getpwent() is iterator in a c++ files or databases, return NULL bcs its the pointer

Now, we want to build a lastlog command
1. We have to open the lastlog file
2. GEt the size of lastlog file
3. User the size to determine the largest userId
4. Enable localization witha  call to setlocale() for dates and times sensitive
5. Print a header row for the output
6. Iterate through the password database,
    (a) getuid fo this entry
    (b) store username based on the uid
    (c) check UID and compare to the largest size, if bigger then never logged in
    (d) 


meld() put 2 fiels side by side and it color codes the differences
---------------------------------------------------------------------
$ lastlog | diff - <(spl_lastlog)
---------------------------------------------------------------------
the use of diff comparing the output of two differnet command

* accessing the information from the kernel memory usually is faster than from 
  the memory, so it might be better to let spl_lastlog bouncing to look 
  for unsorted uid compared to sorting the uid to another storage

do lastlog and use - ???????


















04/14 pg 292 of 509

User Space Buffering of Input


