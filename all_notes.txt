-------------------------------- CHAPTER 09 ----------------------------------------------------------

int get_int(char *arg, int flags, int *value, char *msg)
  // process a string input 'arg' and attempt to convert it to an integer based on 'flags'
  char* arg [IN] â€“ input string to parse, provided by caller
  int flags [IN] - specify how to handle anomalies during parsing (allowed condition of arg)
  int* value [OUT] - pointer to an integer where the function will store the parsed number if successful
  char* msg [OUT] - pointer to a character array where an error message will be stored if parsing fails

int kill(pid_t pid, int sig);
  // send any signal to any process group or process
  #include <signal.h>
  pid_t pid - target process identifier (PID) to be sent, based on the value below, signal will be send to:
    > 0   : the process with the specified PID.
    == 0  : all processes in the process group of the calling process.
    < -1  : all processes in the process group whose ID is the absolute value of pid.
    == -1 : all processes for which the calling process has permission to send signals, except for process 1 (init).
  int sig - signal number to be sent, some common ones are:
    SIGTERM (15): politely asking to terminate a process
    SIGKILL (9): temrinate process immediately, CAN'T BE IGNORED
    SIGSTOP (19): pause process, CAN'T BE IGNORED
    SIGCONT (18): resume paused process
    SIGALRM (15): timer signal from alarm()

unsigned sleep(unsigned seconds);
  // cause the calling thread to be suspended from execution until time elapsed
  #include <unistd.h>

int raise(int sig);
  // sends signal 'sig' to the calling process or thread
  #include <signal.h>

sighandler_t signal(int signum, sighandler_t handler);
  // sets the disposition of the signal signum to handler
  // Avoid its use: use sigaction(2) instead
  // The signals SIGKILL and SIGSTOP cannot be caught or ignored.
  #include <signal.h>
  int signum - the signal number to handle
  sighandler_t handler - pointer to the signal handling function of the specified signal
    SIG_IGN to ignore the signal.
    SIG_DFL to reset the handling to its default behavior.

usleep(3)
int usleep(useconds_t usec);
  /// suspends the execution of calling thread for 'usec' microseconds
  #include <unistd.h>

volatile sig_atomic_t got_interrupt= 0;
  // handle changes that occur outside the normal execution flow of a program
  // it is volatile bcs the program can always get interrupt
  volatile - used to tell compiler that the value of a variable can change anytime
  sig_atomic_t - int type that is guaranteed atomic completed in single step
  got_interrupt - a flag to indicate if there's signal coming and interrupt the running program

ssize_t write(int fildes, const void *buf, size_t nbyte);
  // write nbyte bytes from the buffer pointer to by buf to the file fildes
  // returns the number of bytes that weree actually written
  #include <unistd.h>

struct sigaction sigact - declares struct sigaction variable to specify how signals are handled

struct sigaction {
  void     (*sa_handler)(int);
  void     (*sa_sigaction)(int, siginfo_t *, void *);
  igset_t   sa_mask;
		// some value include SA_NOCLDSTOP, SA_NOCLDWAIT, SA_NODEFER, SA_ONSTACK, SA_RESETHAND
  int        sa_flags;
  void     (*sa_restorer)(void);
};

sigact.sa_handler = on_interrupt; // caught a signal
sigemptyset(&sigact.sa_mask); // furthur signal that is same with the current handled signal will not be blocked until completion
sigact.sa_flags = 0; // not using special signal handling which means syscalls won't start automatically

int sigemptyset(sigset_t *set);
  // initializes and empty a signal set
  #include <signal.h>

int sigaction(int sig, const struct sigaction *restrict act, struct sigaction *restrict oact);
  // examine and change a signal action
  #include <signal.h>
  int sig - specifies the signal number which action will be change
  const struct sigaction *restrict act - pointer to a struct sigaction structure that defines the new action
    Contains several fields:
      - sa_handler or sa_sigaction: Specifies the handler function or action when the signal is received.
      - sa_mask: A set of signals to be blocked during the execution of the signal handling function.
      - sa_flags: Flags that modify the behavior of the signal handling; 
          ex: SA_RESTART to make certain interrupted system calls restart automatically.
  struct sigaction *restrict oact - OPTIONAL, If not null, sigaction() will save the previous action of specified signal sig in the oact

int tcflush(int fildes, int queue_selector);
  #include <termios.h>
  #include <unistd.h>
  fildes - file dscriptor of the device to flush
  queue_selector - value that specifies which queue to flush, possible values:
    TCIFLUSH - flushes input queue
    TCOFLUSH - flushes output queue
    TCIOFLUSH - flush both

usleep(3)
int usleep(useconds_t usec);
  /// suspends the execution of calling thread for 'usec' microseconds
  #include <unistd.h>

char *strsignal(int sig);
  // return string describing signal
  #include <string.h>

typedef struct {
	int si_signo;     // signal number being delivered, always set
	int si_code;      // signal code, always set (system generated)
	union sigval si_value;  // signal value
	int si_errno;     // if non-zero, errno value associated w/ this signal
	pid_t si_pid;     // pid of sending process
	uid_t si_uid;     // real uid of sending process
	void *si_addr;    // address at which fault occured
	int si_status;    // exit value or signal for process termination
	int si_band;      // band event for SIGPOLL/SIGIO
} siginfo_t;

sigset_t
  // a type representing a signal set, used by signal blocking functions to specify which signals are affected.
  // because blocked signal has occured but is still pending, 
  // sigset_t passed to sigpending containes the pending signals for the calling process

const char *sigabbrev_np(int sig);
  // returns abbreviated name of signal sig

action.sa_sigaction = sig_handler;       /* SIGINT handler, to specify signal catching function  */
action.sa_flags = SA_SIGINFO | flags;    /* Add the entered flags, to modifies behavior */
sigemptyset(&blocked);                   /* Clear all bits of mask.   */
action.sa_mask = blocked;                /* mask of signal to be blocked during execution of signal handler */
  // In the sigaction structure, the sa_flags field can be used to modify the behavior of a specified signal. 
  // When the SA_SIGINFO flag is set in the sa_flags field, the sa_sigaction field specifies a signal-catching function

void* memset (void* ptr, int value, size_t num);
  // sets sets the first 'num' bytes of the block of memory pointer by 'ptr' to the specified 'value'
  void* ptr - pointer to the block of memory to fill
  int value - value to be set
  size_t num - num of bytes to send to value

int sigaddset(sigset_t *set, int signo);
  // add a signal to signal set, have to sigemptyset() or sigfillset() at least once prior to any other use of that object
  #include <signal.h>
  sigset_t *set - the set fo signal to be deleted from
  int signo - signal number from the set

int sigprocmask(int how, const sigset_t *_Nullable restrict set, sigset_t *_Nullable restrict oldset);
  // examine and change the signal mask of the calling thread
  #include <signal.h>
  int how - how the signal mask should be changed, the value options are
    SIG_BLOCK - signals specified in 'set' are added to the current signal mask
    SIG_UNBLOCK - signals specified in 'set' are removed from the current signal mask
    SIG_SETMASK - signals specified in 'set' becomes the new signal mask replacing the current mask
  const sigset_t *_Nullable restrict set - set of signals to be updated
  sigset_t *_Nullable restrict oldset - pointer to a sigset_t 


















-------------------------------- CHAPTER 10 ----------------------------------------------------------

struct timespec {
  time_t tv_sec; // seconds
  /* ... */ tv_nsec; // nanoseconds
} // #include <time.h> dsecribes times in seconds and nanoseconds

unsigned int alarm(unsigned int seconds);
  // arrages SIGALARM signla to be delivered to the calling process in 'seconds' seconds
  // came as settimer(2)
  #include <unistd.h>

int nanosleep(const struct timespec *req, struct timespec *rem); 
  // suspend the execution of the calling thread for an interval specified with nanosec
  const struct timespec *req - a pointer to 'struct timespec' that specifies interval time of the thread should be suspended
  struct timespec *rem - pointer to 'struct timespec' where any remaining time will be store when the call is interrupted by signal handler

struct tm {
    int tm_sec;    // Seconds (0-59)
    int tm_min;    // Minutes (0-59)
    int tm_hour;   // Hours (0-23)
    int tm_mday;   // Day of the month (1-31)
    int tm_mon;    // Month (0-11)
    int tm_year;   // Year - 1900
    int tm_wday;   // Day of the week (0-6, Sunday = 0)
    int tm_yday;   // Day in the year (0-365, January 1st = 0)
    int tm_isdst;  // Daylight Saving Time flag (positive if DST is in effect, 0 if not, negative if unknown)
};

time_t  // type of time, counting the time from when epoch start

size_t strftime(char *s, size_t max, const char *format, const struct tm *tm);


int clock_gettime(clockid_t clk_id, struct timespec *tp);
  // retrieve time fo the specified clock clk_id
  clockid_t clk_id - represent the clock to obtian the time, can be from CLOCK_REALTIME, CLOCK_MONOTONIC, etc
  struct timespec *tp - curent time will bestored upon success
  // format the time represneted by 'struct tm' into a string according to a specified format
  #include <time.h>
  char *s - pointer to char array where the formatted string will be stored
  size_t max - max num of char to be written to 's', including it's null terminator
  const char *format - format of the outputted string (as time), as %A, %d, etc
  const struct tm *tm - pointer to 'struct tm' containing the time info to be formatted

int sigfillset(sigset_t *set);  
  // initializes set to full, to include all the signals (make it containes all the possible signals)

struct tm *localtime(const time_t *timep);
  // convert time represented by 'time_t' object into struct tm representing local time

#define CLEAR_SCREEN "\033[2J" 
  // define macro named 'CLEAR_SCREEN', using the sequence '\033[2J' which is recognnized by terminal emulators
  // \033: ASCII escape character, represents the beginning of an escape sequence
     [: opening bracket, marking the start of a control sequence.
     2J: control sequence parameter that tells the terminal to clear the screen.

int clock_gettime(clockid_t clk_id, struct timespec *tp);
  // retrieve time for the specified clock clk_id
  clockid_t clk_id - represent the clock to obtain the time, can be from CLOCK_REALTIME, CLOCK_MONOTONIC, etc
  struct timespec *tp - curent time will bestored upon success

#define CLEAR_LINE      "\033[1A\033[2K\033[G"
#define CLEAR_SCREEN    "\033[2J"
#define CLEAR_ABOVE     "\033[1J"
#define CLEAR_DOWN      "\033[0J"
#define INVERSE_START    "\033[7m"
#define INVERSE_END     "\033[27m"
#define PROMPT            "prompt: "
#define CURSOR_HOME     "\033[1;1H"
#define CURSOR_PARK     "\033[24;80H"
#define CURSOR_UP_2     "\033[2A"
#define CURSOR_DOWN_2   "\033[4B"
#define SCROLL_WINDOW   "\033M"

void display_menu(FILE* fp)
{
    char * menu =
"v  displays a prompt in reverse video         p displays prompt in normal video\n"
"h  homes the cursor (at upper left)         b moves cursor to lower right\n"
"c  clears entire screen                     l clears lines containing cursor\n"
"z  clears from cursor to bottom of screen   u clears screen above the cursor\n"
"+  moves cursor up 1 line                   s moves cursor up 20 lines, \n"
"                                              scrolling if necessary\n"
"?  displays this menu                       q quits\n";
    fprintf(fp, "%s", menu);
}




FILE *fopen(const char *restrict pathname, const char *restrict mode);
  // opens the file whose name is the string pointer to by 'pathname' and associates a stream with it
  // return pointer to the file which can be used to access, NULL if not
  const char *restrict pathname - specified the pathname, can be absolute or relative
  const char *restrict mode - how the file is accessed (r[open] w[write] a[appending] etc...)

int isatty(int fd);
  // test if a file descriptor refers to a terminal
  #include <unistd.h>

void* calloc( size_t num, size_t size );
  // allocate memory for an array of 'num' object of 'size' and initializes all bytes in the allocated storage to zero

int fgetc(FILE *stream);
  // gets the next char from the specified stream and advances the position indicator for the stream
  // if return is EOF, means that an error or end of file
  
void free(void *ptr);
  // deallocated the memory previously allocated by a call to calloc, malloc, realloc

int fflush(FILE *_Nullable stream);
  // to flush a stream 'stream', the idea where it flush the content right away instead of waiting for the end of the program
  #include <stdio.h>

struct sigevent {
    int    sigev_notify;  /* Notification method */
                value can be SIGEV_NONE (do nothing), 
                             SIGEV_SIGNAL (notify by sending the signal specified in sigev_signo)
                             SIGEV_THREAD or SIGEV_THREAD_ID (by invoking sigev_notify_function)
    int    sigev_signo;   /* Notification signal */
    union sigval sigev_value; /* Data passed with notification */
    void (*sigev_notify_function)(union sigval);  /* Function used for thread notification (SIGEV_THREAD) */
    void  *sigev_notify_attributes;  /* Attributes for notification thread SIGEV_THREAD) */
    pid_t  sigev_notify_thread_id;  /* ID of thread to signal (SIGEV_THREAD_ID); Linux-specific */
};

struct itimerspec {
    struct timespec  it_interval;  /* Interval for periodic timer */
    struct timespec  it_value;     /* Initial expiration */
};

int timer_settime(timer_t timerid, int flags, const struct itimerspec *restrict new_value, struct itimerspec *_Nullable restrict old_value);
  // arms or disarms the timer identified by 'timerid'
  timer_t timerid - timer identifier
  int flags - can be set to 0 ('new_value' is relative time) or TIMER_ABSTIME ('new_velue' is absolute time)
  const struct itimerspec *restrict new_value - new initial value and interval for the timer
  struct itimerspec *_Nullable restrict old_value - if non-NULL, its a pointer to a struct itimerspec struct which 
                stores the prev setting of the timer upon successful completion)

void *memset(void s[.n], int c, size_t n);
  // fills the first 'n' bytes of memory area pointer to by 's' with the constant byte 'c'
  #include <stirng.h>

double drand48(void);
  // return nonnegative double-precision floating-point values uniformly distributed over interval [0.0, 1.0]

struct winsize {
  unsigned short ws_row;	/* rows, in characters */
  unsigned short ws_col;	/* columns, in characters */
  unsigned short ws_xpixel;	/* horizontal size, pixels */
  unsigned short ws_ypixel;	/* vertical size, pixels */
};
  #include <sys/ioctl.h>
  // int ioctl(int fd, int cmd, ... );

int ioctl(int fd, unsigned long request, ...);
  // manipulates the underlying device parameters of special files
  int fd - file descriptor that represents an open file, socket, or other devices that supports device-specific I/O operations
  unsigned long request - device-dependent request code that determine the behavior of 'ioctl()'
  ... (varags) - optional arguments whose type and number depend on the 'request' code




























Dyanmic Linking file: when we open the process, it will not goes directly to the program and start it. 
What actually runs first is the dynamic linker. 
The dynamic linker is used to access the memory and gets all the data to run the progress, also called interpreter

A program is made by another program. Whenever the computer is on, the first program that will run is init, which is now called systemd.

When a process is created it calls fork process, and what is does is to fork the parents. But remember that if the parent id is termianted, ti doesnt mean that the child is also terminated.

When you are putting command or execute signal handler to the controlling terminal, the signal will lbe sent to all,
that is why on server, we need them to be server terminal so it is not attached to any controller and be immune to the signal sent to other terminal.